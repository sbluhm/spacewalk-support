/*
 * Contract.java May 2004
 *
 * Copyright (C) 2004, Niall Gallagher <niallg@users.sf.net>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General 
 * Public License along with this library; if not, write to the 
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330, 
 * Boston, MA  02111-1307  USA
 */

package simple.util.lease;

/**
 * A <code>Contract</code> is used to represent the contract a
 * lease has been issued. This contains all relevant information
 * regarding the lease, such as the named resource that has been 
 * leased and the duration of the lease. Equality is determined
 * by comparing the resource name that the contract represents.
 *
 * @author Niall Gallagher
 */
interface Contract {

   /**
    * This returns the name of the resource this represents. 
    * This should be used to determine the equality of contracts
    * and also to generate the hash code for the contract object.
    * This will allow contracts to be stored in hash containers.
    *
    * @return returns the resource name that this represents
    */
   public String getName();   

   /**
    * This method will return the number of milliseconds that
    * remain in the contract. If the value returned is less than
    * or equal to zero then it should be assumed that the lease
    * has expired, if greater than zero the lease is active.
    *
    * @return returns the duration in milliseconds remaining
    */
   public long getExpiry();

   /**
    * Determines whether the object is equal to the contract. A
    * contract is equal to either a <code>Contract</code> with
    * the same name or a string with the same contract name.
    *
    * @param value the object to be compared for equality
    *
    * @return true if the is or has the same resource name
    */
   public boolean equals(Object value);

   /**
    * Returns the hash code generated for this contract instance.
    * The hash code for an instance must be the same as the hash
    * code generated by the resource name string. This is so
    * that contracts can be stored in hash containers.
    *
    * @return the hash code generated for this contract object
    */
   public int hashCode();
}
