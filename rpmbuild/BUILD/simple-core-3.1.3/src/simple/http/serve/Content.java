/*
 * Content.java December 2002
 *
 * Copyright (C) 2002, Niall Gallagher <niallg@users.sf.net>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General 
 * Public License along with this library; if not, write to the 
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330, 
 * Boston, MA  02111-1307  USA
 */
  
package simple.http.serve;

import java.io.OutputStream;
import java.io.IOException;

/**
 * The <code>Content</code> interface is used to provide an interface
 * to content within a <code>Context</code>. The contents represented
 * by the <code>Content</code> implementation could be dynamic or
 * static depending on the <code>Context</code> that served it.
 * <p>
 * Static content represented by resources on the underlying file
 * system such as files are represented as <code>Content</code>
 * objects to provide a simple means of writing that content to HTTP
 * clients using an <code>OutputStream</code>. 
 * <p>
 * The <code>Content</code> interface can also be used to provide a
 * means for writing dynamic content. Dynamic content such as that
 * produced by <code>simple.template.Document</code> objects can be
 * implemented as a <code>Content</code>. The implementation can then
 * be presented to the client using the <code>write</code> methods.
 *
 * @author Niall Gallagher
 *
 * @see simple.http.serve.ContentFactory
 */
public interface Content {

   /**
    * This writes the contents of the instance to the issued stream.
    * This provides a means for the <code>Content</code> to write
    * its contents to an <code>OutputStream</code>. Typically this
    * is used by <code>Service</code> objects when data is to be 
    * provided to the client using the <code>Response</code>. Any
    * problems in writing the contents results in an exception.
    *
    * @param out this is the stream to write the content with
    *
    * @exception IOException thrown if there is an I/O problem
    */
   public void write(OutputStream out) throws IOException;
   
   /**
    * The content that is dynamically generated by the object
    * us written as a specific MIME type, including charset
    * information which determines the content encoding. For
    * example if the output was HTML written using UTF-8 
    * format then this would return "text/html; charset=utf-8".
    *
    * @return returns the MIME type of the generated content
    */
   public String getContentType(); 

   /**
    * This method is used to embed the generated contents into
    * other strings and capture the value of the content as a
    * string. In order to manipulate the contents of a file it
    * is necessary to acquire a handle on its contents. This
    * method allows such a handle. The contents returned by
    * this will typically be UTF-8, however the encoding of a
    * content object is independant as is the MIME type.
    *
    * @return returns the contents of the generated content
    */ 
   public String toString();
}
