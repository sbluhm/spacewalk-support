/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2020-03-09 19:26:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apidoc.handlers;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class SystemDetailsHandler_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n<head>\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n\n<style type=\"text/css\">\nul.apidoc {\n   list-style-image: url('/img/parent_node.gif');\n}\n\n.deprecated {\n   text-decoration: line-through;\n}\n</style>\n</head>\n<body>\n<div class=\"spacewalk-toolbar-h1\">\n<h1><i class=\"fa fa-gears\"></i>API Overview</h1>\n</div>\n\n<h2>Description</h2>\n<p><strong>Namespace</strong>:\nkickstart.profile.system\n</p>\n<p>Provides methods to set various properties of a kickstart profile.</p>\n<span class=\"small-text\">( <a href=\"/rhn/apidoc/index.jsp\">Return to API Overview</a> )</span>\n<hr />\n\n<div class=\"rounded-box\">\n<h2><a name=\"top\">Available methods</a></h2>\n<ul class=\"apidoc\">\n\n<li><a href=\"#addFilePreservations\"/>addFilePreservations</a></li>\n<li><a href=\"#addKeys\"/>addKeys</a></li>\n<li><a href=\"#checkConfigManagement\"/>checkConfigManagement</a></li>\n<li><a href=\"#checkRemoteCommands\"/>checkRemoteCommands</a></li>\n<li><a href=\"#disableConfigManagement\"/>disableConfigManagement</a></li>\n<li><a href=\"#disableRemoteCommands\"/>disableRemoteCommands</a></li>\n");
      out.write("<li><a href=\"#enableConfigManagement\"/>enableConfigManagement</a></li>\n<li><a href=\"#enableRemoteCommands\"/>enableRemoteCommands</a></li>\n<li><a href=\"#getLocale\"/>getLocale</a></li>\n<li><a href=\"#getPartitioningScheme\"/>getPartitioningScheme</a></li>\n<li><a href=\"#getRegistrationType\"/>getRegistrationType</a></li>\n<li><a href=\"#getSELinux\"/>getSELinux</a></li>\n<li><a href=\"#listFilePreservations\"/>listFilePreservations</a></li>\n<li><a href=\"#listKeys\"/>listKeys</a></li>\n<li><a href=\"#removeFilePreservations\"/>removeFilePreservations</a></li>\n<li><a href=\"#removeKeys\"/>removeKeys</a></li>\n<li><a href=\"#setLocale\"/>setLocale</a></li>\n<li><a href=\"#setPartitioningScheme\"/>setPartitioningScheme</a></li>\n<li><a href=\"#setRegistrationType\"/>setRegistrationType</a></li>\n<li><a href=\"#setSELinux\"/>setSELinux</a></li>\n</ul>\n</div>\n<hr />\n\n<h3> <a name=\"addFilePreservations\" href=\"#top\">Method: addFilePreservations</a></h3>\nDescription:<br />\nAdds the given list of file preservations to the specified kickstart\n profile.\n");
      out.write("<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string kickstartLabel\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - filePreservations</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"addKeys\" href=\"#top\">Method: addKeys</a></h3>\nDescription:<br />\nAdds the given list of keys to the specified kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string kickstartLabel\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - keyDescription</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"checkConfigManagement\" href=\"#top\">Method: checkConfigManagement</a></h3>\nDescription:<br />\nCheck the configuration management status for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - the kickstart profile label\n");
      out.write(" </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    boolean enabled - true if configuration\n management is enabled; otherwise, false\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"checkRemoteCommands\" href=\"#top\">Method: checkRemoteCommands</a></h3>\nDescription:<br />\nCheck the remote commands status flag for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - the kickstart profile label\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    boolean enabled - true if remote\n commands support is enabled; otherwise, false\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"disableConfigManagement\" href=\"#top\">Method: disableConfigManagement</a></h3>\nDescription:<br />\nDisables the configuration management flag in a kickstart profile\n so that a system created using this profile will be NOT be configuration capable.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - the kickstart profile label\n </li>\n</ul>\n<p />\n");
      out.write("Returns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"disableRemoteCommands\" href=\"#top\">Method: disableRemoteCommands</a></h3>\nDescription:<br />\nDisables the remote command flag in a kickstart profile\n so that a system created using this profile\n will be capable of running remote commands\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - the kickstart profile label\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"enableConfigManagement\" href=\"#top\">Method: enableConfigManagement</a></h3>\nDescription:<br />\nEnables the configuration management flag in a kickstart profile\n so that a system created using this profile will be configuration capable.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - the kickstart profile label\n </li>\n</ul>\n<p />\nReturns:\n");
      out.write("<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"enableRemoteCommands\" href=\"#top\">Method: enableRemoteCommands</a></h3>\nDescription:<br />\nEnables the remote command flag in a kickstart profile\n so that a system created using this profile\n  will be capable of running remote commands\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - the kickstart profile label\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getLocale\" href=\"#top\">Method: getLocale</a></h3>\nDescription:<br />\nRetrieves the locale for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string ksLabel - the kickstart profile label\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\t     struct - locale info\n\t<ul>\n              \t<li> string \"locale\"</li>\n              \t<li> boolean \"useUtc\"</li>\n");
      out.write("                  \t<ul>\n                      \t<li>true - the hardware clock uses UTC</li>\n                      \t<li>false - the hardware clock does not use UTC</li>\n                  \t</ul>\n          \t</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getPartitioningScheme\" href=\"#top\">Method: getPartitioningScheme</a></h3>\nDescription:<br />\nGet the partitioning scheme for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - The label of a kickstart\n profile.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nstring[] - A list of partitioning commands used to\n setup the partitions, logical volumes and volume groups.\" \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getRegistrationType\" href=\"#top\">Method: getRegistrationType</a></h3>\nDescription:<br />\nreturns the registration type of a given kickstart profile.\n Registration Type can be one of reactivation/deletion/none\n These types determine the behaviour of the registration when using\n this profile for reprovisioning.\n");
      out.write("<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string kickstartLabel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    string registrationType\n      \t<ul>\n         \t<li>reactivation</li>\n         \t<li>deletion</li>\n         \t<li>none</li>\n      \t</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getSELinux\" href=\"#top\">Method: getSELinux</a></h3>\nDescription:<br />\nRetrieves the SELinux enforcing mode property of a kickstart\n profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - the kickstart profile label\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    string enforcingMode\n      \t<ul>\n          \t<li>enforcing</li>\n          \t<li>permissive</li>\n          \t<li>disabled</li>\n      \t</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listFilePreservations\" href=\"#top\">Method: listFilePreservations</a></h3>\nDescription:<br />\nReturns the set of all file preservations associated with the given\n kickstart profile.\n<p />\n\n\n\n\n");
      out.write("Parameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string kickstartLabel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n         \n\n\t     struct - file list\n\t<ul>\n     \t<li> string \"name\"</li>\n         <li>array \"file_names\"\n        <ul>\n            <li>string name</li>\n        </ul>\n    </li>\n   \t</ul>\n \n     </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listKeys\" href=\"#top\">Method: listKeys</a></h3>\nDescription:<br />\nReturns the set of all keys associated with the given kickstart\n             profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string kickstartLabel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \t     struct - key\n\t<ul>\n              \t<li> string \"description\"</li>\n              \t<li> string \"type\"</li>\n              \t<li> string \"content\"</li>\n          \t</ul>\n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removeFilePreservations\" href=\"#top\">Method: removeFilePreservations</a></h3>\n");
      out.write("Description:<br />\nRemoves the given list of file preservations from the specified\n kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string kickstartLabel\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - filePreservations</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removeKeys\" href=\"#top\">Method: removeKeys</a></h3>\nDescription:<br />\nRemoves the given list of keys from the specified kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string kickstartLabel\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - keyDescription</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setLocale\" href=\"#top\">Method: setLocale</a></h3>\nDescription:<br />\nSets the locale for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n");
      out.write(" </li>\n<li>\n\n    string ksLabel - the kickstart profile label\n </li>\n<li>\n\n    string locale - the locale\n </li>\n<li>\n\n    boolean useUtc\n      \t<ul>\n          \t<li>true - the hardware clock uses UTC</li>\n          \t<li>false - the hardware clock does not use UTC</li>\n      \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setPartitioningScheme\" href=\"#top\">Method: setPartitioningScheme</a></h3>\nDescription:<br />\nSet the partitioning scheme for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - The label of the\n kickstart profile to update.\n </li>\n<li>\n\n    string[] scheme - The partitioning scheme\n is a list of partitioning command strings used to setup the partitions,\n volume groups and logical volumes.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setRegistrationType\" href=\"#top\">Method: setRegistrationType</a></h3>\n");
      out.write("Description:<br />\nSets the registration type of a given kickstart profile.\n Registration Type can be one of reactivation/deletion/none\n These types determine the behaviour of the re registration when using\n this profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string kickstartLabel\n </li>\n<li>\n\n    string registrationType\n      \t<ul>\n         \t<li>reactivation - to try and generate a reactivation key\n              and use that to register the system when reprovisioning a system.</li>\n         \t<li>deletion - to try and delete the existing system profile\n              and reregister the system being reprovisioned as new</li>\n         \t<li>none - to preserve the status quo and leave the current system\n              as a duplicate on a reprovision.</li>\n      \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setSELinux\" href=\"#top\">Method: setSELinux</a></h3>\nDescription:<br />\n");
      out.write("Sets the SELinux enforcing mode property of a kickstart profile\n so that a system created using this profile will be have\n the appropriate SELinux enforcing mode.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - the kickstart profile label\n </li>\n<li>\n\n    string enforcingMode - the selinux enforcing mode\n      \t<ul>\n          \t<li>enforcing</li>\n          \t<li>permissive</li>\n          \t<li>disabled</li>\n      \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
