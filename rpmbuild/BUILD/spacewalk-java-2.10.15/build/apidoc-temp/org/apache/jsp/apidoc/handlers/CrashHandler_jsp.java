/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2020-03-09 19:26:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apidoc.handlers;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class CrashHandler_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n<head>\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n\n<style type=\"text/css\">\nul.apidoc {\n   list-style-image: url('/img/parent_node.gif');\n}\n\n.deprecated {\n   text-decoration: line-through;\n}\n</style>\n</head>\n<body>\n<div class=\"spacewalk-toolbar-h1\">\n<h1><i class=\"fa fa-gears\"></i>API Overview</h1>\n</div>\n\n<h2>Description</h2>\n<p><strong>Namespace</strong>:\nsystem.crash\n</p>\n<p>Provides methods to access and modify software crash information.</p>\n<span class=\"small-text\">( <a href=\"/rhn/apidoc/index.jsp\">Return to API Overview</a> )</span>\n<hr />\n\n<div class=\"rounded-box\">\n<h2><a name=\"top\">Available methods</a></h2>\n<ul class=\"apidoc\">\n\n<li><a href=\"#createCrashNote\"/>createCrashNote</a></li>\n<li><a href=\"#deleteCrash\"/>deleteCrash</a></li>\n<li><a href=\"#deleteCrashNote\"/>deleteCrashNote</a></li>\n<li><a href=\"#getCrashCountInfo\"/>getCrashCountInfo</a></li>\n<li><a href=\"#getCrashFile\"/>getCrashFile</a></li>\n<li><a href=\"#getCrashFileUrl\"/>getCrashFileUrl</a></li>\n<li><a href=\"#getCrashNotesForCrash\"/>getCrashNotesForCrash</a></li>\n");
      out.write("<li><a href=\"#getCrashOverview\"/>getCrashOverview</a></li>\n<li><a href=\"#getCrashesByUuid\"/>getCrashesByUuid</a></li>\n<li><a href=\"#listSystemCrashFiles\"/>listSystemCrashFiles</a></li>\n<li><a href=\"#listSystemCrashes\"/>listSystemCrashes</a></li>\n</ul>\n</div>\n<hr />\n\n<h3> <a name=\"createCrashNote\" href=\"#top\">Method: createCrashNote</a></h3>\nDescription:<br />\nCreate a crash note\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    int crashId\n </li>\n<li>\n\n    string subject\n </li>\n<li>\n\n    string details\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"deleteCrash\" href=\"#top\">Method: deleteCrash</a></h3>\nDescription:<br />\nDelete a crash with given crash id.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    int crashId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"deleteCrashNote\" href=\"#top\">Method: deleteCrashNote</a></h3>\n");
      out.write("Description:<br />\nDelete a crash note\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    int crashNoteId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getCrashCountInfo\" href=\"#top\">Method: getCrashCountInfo</a></h3>\nDescription:<br />\nReturn date of last software crashes report for given system\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    int serverId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\t     struct - Crash Count Information\n\t<ul>\n             <li> int \"total_count\" - Total number of software crashes for a system </li>\n             <li> int \"unique_count\" - Number of unique software crashes for a system </li>\n             <li> dateTime.iso8601 \"last_report\" - Date of the last software crash report </li>\n     \t</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getCrashFile\" href=\"#top\">Method: getCrashFile</a></h3>\nDescription:<br />\nDownload a crash file.\n");
      out.write("<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    int crashFileId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nbase64 - base64 encoded crash file. \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getCrashFileUrl\" href=\"#top\">Method: getCrashFileUrl</a></h3>\nDescription:<br />\nGet a crash file download url.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    int crashFileId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nstring - The crash file download url \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getCrashNotesForCrash\" href=\"#top\">Method: getCrashNotesForCrash</a></h3>\nDescription:<br />\nList crash notes for crash\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    int crashId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n         \t     struct - crashNote\n\t<ul>\n             \t<li> int \"id\"</li>\n             \t<li> string \"subject\"</li>\n             \t<li> string \"details\"</li>\n             \t<li> string \"updated\"</li>\n");
      out.write("         \t</ul>\n     </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getCrashOverview\" href=\"#top\">Method: getCrashOverview</a></h3>\nDescription:<br />\nGet Software Crash Overview\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n         \t     struct - crash\n\t<ul>\n                 <li> string \"uuid\" - Crash UUID </li>\n                 <li> string \"component\" - Package component (set if unique and non empty) </li>\n                 <li> int \"crash_count\" - Number of crashes occurred </li>\n                 <li> int \"system_count\" - Number of systems affected </li>\n                 <li> dateTime.iso8601 \"last_report\" - Last crash occurence </li>\n         \t</ul>\n     </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getCrashesByUuid\" href=\"#top\">Method: getCrashesByUuid</a></h3>\nDescription:<br />\nList software crashes with given UUID\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string uuid\n");
      out.write(" </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n         \t     struct - crash\n\t<ul>\n                 <li> int \"server_id\" - ID of the server the crash occurred on </li>\n                 <li> string \"server_name\" - Name of the server the crash occurred on </li>\n                 <li> int \"crash_id\" - ID of the crash with given UUID </li>\n                 <li> int \"crash_count\" - Number of times the crash with given UUID occurred </li>\n                 <li> string \"crash_component\" - Crash component </li>\n                 <li> dateTime.iso8601 \"last_report\" - Last crash occurence </li>\n         \t</ul>\n     </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listSystemCrashFiles\" href=\"#top\">Method: listSystemCrashFiles</a></h3>\nDescription:<br />\nReturn list of crash files for given crash id.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    int crashId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n         \t     struct - crashFile\n\t<ul>\n");
      out.write("             \t<li> int \"id\"</li>\n             \t<li> string \"filename\"</li>\n             \t<li> string \"path\"</li>\n             \t<li> int \"filesize\"</li>\n             \t<li> boolean \"is_uploaded\"</li>\n             \t<li> date \"created\"</li>\n             \t<li> date \"modified\"</li>\n         \t</ul>\n     </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listSystemCrashes\" href=\"#top\">Method: listSystemCrashes</a></h3>\nDescription:<br />\nReturn list of software crashes for a system.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    int serverId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n         \t     struct - crash\n\t<ul>\n             \t<li> int \"id\"</li>\n             \t<li> string \"crash\"</li>\n             \t<li> string \"path\"</li>\n             \t<li> int \"count\"</li>\n             \t<li> string \"uuid\"</li>\n             \t<li> string \"analyzer\"</li>\n             \t<li> string \"architecture\"</li>\n             \t<li> string \"cmdline\"</li>\n             \t<li> string \"component\"</li>\n");
      out.write("             \t<li> string \"executable\"</li>\n             \t<li> string \"kernel\"</li>\n             \t<li> string \"reason\"</li>\n             \t<li> string \"username\"</li>\n             \t<li> date \"created\"</li>\n             \t<li> date \"modified\"</li>\n         \t</ul>\n     </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
