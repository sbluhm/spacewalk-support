/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2020-03-09 19:26:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apidoc.handlers;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class KickstartHandler_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n<head>\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n\n<style type=\"text/css\">\nul.apidoc {\n   list-style-image: url('/img/parent_node.gif');\n}\n\n.deprecated {\n   text-decoration: line-through;\n}\n</style>\n</head>\n<body>\n<div class=\"spacewalk-toolbar-h1\">\n<h1><i class=\"fa fa-gears\"></i>API Overview</h1>\n</div>\n\n<h2>Description</h2>\n<p><strong>Namespace</strong>:\nkickstart\n</p>\n<p>Provides methods to create kickstart files</p>\n<span class=\"small-text\">( <a href=\"/rhn/apidoc/index.jsp\">Return to API Overview</a> )</span>\n<hr />\n\n<div class=\"rounded-box\">\n<h2><a name=\"top\">Available methods</a></h2>\n<ul class=\"apidoc\">\n\n<li><a href=\"#cloneProfile\"/>cloneProfile</a></li>\n<li><a href=\"#createProfile\"/>createProfile</a></li>\n<li><a href=\"#createProfile\"/>createProfile</a></li>\n<li><a href=\"#createProfileWithCustomUrl\"/>createProfileWithCustomUrl</a></li>\n<li><a href=\"#createProfileWithCustomUrl\"/>createProfileWithCustomUrl</a></li>\n<li><a href=\"#deleteProfile\"/>deleteProfile</a></li>\n<li><a href=\"#disableProfile\"/>disableProfile</a></li>\n");
      out.write("<li><a href=\"#findKickstartForIp\"/>findKickstartForIp</a></li>\n<li><a href=\"#importFile\"/>importFile</a></li>\n<li><a href=\"#importFile\"/>importFile</a></li>\n<li><a href=\"#importFile\"/>importFile</a></li>\n<li><a href=\"#importRawFile\"/>importRawFile</a></li>\n<li><a href=\"#importRawFile\"/>importRawFile</a></li>\n<li><a href=\"#isProfileDisabled\"/>isProfileDisabled</a></li>\n<li><a href=\"#listAllIpRanges\"/>listAllIpRanges</a></li>\n<li><a href=\"#listKickstartableChannels\"/>listKickstartableChannels</a></li>\n<li><a href=\"#listKickstartableTreeChannels\"/>listKickstartableTreeChannels</a></li>\n<li><a href=\"#listKickstartableTrees\"/>listKickstartableTrees</a></li>\n<li><a href=\"#listKickstarts\"/>listKickstarts</a></li>\n<li><a href=\"#renameProfile\"/>renameProfile</a></li>\n</ul>\n</div>\n<hr />\n\n<h3> <a name=\"cloneProfile\" href=\"#top\">Method: cloneProfile</a></h3>\nDescription:<br />\nClone a Kickstart Profile\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabelToClone - Label of the\n kickstart profile to clone\n");
      out.write(" </li>\n<li>\n\n    string newKsLabel - label of the cloned profile\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"createProfile\" href=\"#top\">Method: createProfile</a></h3>\nDescription:<br />\nCreate a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string profileLabel - Label for the new\n kickstart profile.\n </li>\n<li>\n\n    string virtualizationType - none, para_host,\n qemu, xenfv or xenpv.\n </li>\n<li>\n\n    string kickstartableTreeLabel - Label of a\n kickstartable tree to associate the new profile with.\n </li>\n<li>\n\n    string kickstartHost - Kickstart hostname\n (of a satellite or proxy) used to construct the default download URL for\n the new kickstart profile.\n </li>\n<li>\n\n    string rootPassword - Root password.\n </li>\n<li>\n\n    string updateType - Should the profile update\n itself to use the newest tree available? Possible values are: none (default),\n red_hat (only use Kickstart Trees synced from Red Hat), or all (includes\n");
      out.write(" custom Kickstart Trees).\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"createProfile\" href=\"#top\">Method: createProfile</a></h3>\nDescription:<br />\nCreate a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string profileLabel - Label for the new\n kickstart profile.\n </li>\n<li>\n\n    string virtualizationType - none, para_host,\n qemu, xenfv or xenpv.\n </li>\n<li>\n\n    string kickstartableTreeLabel - Label of a\n kickstartable tree to associate the new profile with.\n </li>\n<li>\n\n    string kickstartHost - Kickstart hostname\n (of a satellite or proxy) used to construct the default download URL for\n the new kickstart profile.\n </li>\n<li>\n\n    string rootPassword - Root password.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"createProfileWithCustomUrl\" href=\"#top\">Method: createProfileWithCustomUrl</a></h3>\n");
      out.write("Description:<br />\nCreate a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string profileLabel - Label for the new\n kickstart profile.\n </li>\n<li>\n\n    string virtualizationType - none, para_host,\n qemu, xenfv or xenpv.\n </li>\n<li>\n\n    string kickstartableTreeLabel - Label of a\n kickstartable tree to associate the new profile with.\n </li>\n<li>\n\n    boolean downloadUrl - Download URL, or\n 'default' to use the kickstart tree's default URL.\n </li>\n<li>\n\n    string rootPassword - Root password.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"createProfileWithCustomUrl\" href=\"#top\">Method: createProfileWithCustomUrl</a></h3>\nDescription:<br />\nCreate a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string profileLabel - Label for the new\n kickstart profile.\n </li>\n<li>\n\n    string virtualizationType - none, para_host,\n");
      out.write(" qemu, xenfv or xenpv.\n </li>\n<li>\n\n    string kickstartableTreeLabel - Label of a\n kickstartable tree to associate the new profile with.\n </li>\n<li>\n\n    boolean downloadUrl - Download URL, or\n 'default' to use the kickstart tree's default URL.\n </li>\n<li>\n\n    string rootPassword - Root password.\n </li>\n<li>\n\n    string updateType - Should the profile update\n itself to use the newest tree available? Possible values are: none (default),\n red_hat (only use Kickstart Trees synced from Red Hat), or all (includes\n custom Kickstart Trees).\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"deleteProfile\" href=\"#top\">Method: deleteProfile</a></h3>\nDescription:<br />\nDelete a kickstart profile\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - The label of\n the kickstart profile you want to remove\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n");
      out.write(" \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"disableProfile\" href=\"#top\">Method: disableProfile</a></h3>\nDescription:<br />\nEnable/Disable a Kickstart Profile\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string profileLabel - Label for the\n kickstart tree you want to en/disable\n </li>\n<li>\n\n    string disabled - true to disable the profile\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"findKickstartForIp\" href=\"#top\">Method: findKickstartForIp</a></h3>\nDescription:<br />\nFind an associated kickstart for a given ip address.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ipAddress - The ip address to\n search for (i.e. 192.168.0.1)\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nstring - label of the kickstart. Empty string (\"\") if\n not found. \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"importFile\" href=\"#top\">Method: importFile</a></h3>\n");
      out.write("Description:<br />\nImport a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string profileLabel - Label for the new\n kickstart profile.\n </li>\n<li>\n\n    string virtualizationType - none, para_host,\n qemu, xenfv or xenpv.\n </li>\n<li>\n\n    string kickstartableTreeLabel - Label of a\n kickstartable tree to associate the new profile with.\n </li>\n<li>\n\n    string kickstartFileContents - Contents of\n the kickstart file to import.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"importFile\" href=\"#top\">Method: importFile</a></h3>\nDescription:<br />\nImport a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string profileLabel - Label for the new\n kickstart profile.\n </li>\n<li>\n\n    string virtualizationType - none, para_host,\n qemu, xenfv or xenpv.\n </li>\n<li>\n\n    string kickstartableTreeLabel - Label of a\n kickstartable tree to associate the new profile with.\n");
      out.write(" </li>\n<li>\n\n    string kickstartHost - Kickstart hostname\n (of a satellite or proxy) used to construct the default download URL for\n the new kickstart profile. Using this option signifies that this default\n URL will be used instead of any url/nfs/cdrom/harddrive commands in the\n kickstart file itself.\n </li>\n<li>\n\n    string kickstartFileContents - Contents of\n the kickstart file to import.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"importFile\" href=\"#top\">Method: importFile</a></h3>\nDescription:<br />\nImport a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string profileLabel - Label for the new\n kickstart profile.\n </li>\n<li>\n\n    string virtualizationType - none, para_host,\n qemu, xenfv or xenpv.\n </li>\n<li>\n\n    string kickstartableTreeLabel - Label of a\n kickstartable tree to associate the new profile with.\n </li>\n<li>\n\n    string kickstartHost - Kickstart hostname\n");
      out.write(" (of a satellite or proxy) used to construct the default download URL for\n the new kickstart profile. Using this option signifies that this default\n URL will be used instead of any url/nfs/cdrom/harddrive commands in the\n kickstart file itself.\n </li>\n<li>\n\n    string kickstartFileContents - Contents of\n the kickstart file to import.\n </li>\n<li>\n\n    string updateType - Should the profile update\n itself to use the newest tree available? Possible values are: none (default),\n red_hat (only use Kickstart Trees synced from Red Hat), or all (includes\n custom Kickstart Trees).\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"importRawFile\" href=\"#top\">Method: importRawFile</a></h3>\nDescription:<br />\nImport a raw kickstart file into satellite.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string profileLabel - Label for the new\n kickstart profile.\n </li>\n<li>\n\n    string virtualizationType - none, para_host,\n");
      out.write(" qemu, xenfv or xenpv.\n </li>\n<li>\n\n    string kickstartableTreeLabel - Label of a\n kickstartable tree to associate the new profile with.\n </li>\n<li>\n\n    string kickstartFileContents - Contents of\n the kickstart file to import.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"importRawFile\" href=\"#top\">Method: importRawFile</a></h3>\nDescription:<br />\nImport a raw kickstart file into satellite.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string profileLabel - Label for the new\n kickstart profile.\n </li>\n<li>\n\n    string virtualizationType - none, para_host,\n qemu, xenfv or xenpv.\n </li>\n<li>\n\n    string kickstartableTreeLabel - Label of a\n kickstartable tree to associate the new profile with.\n </li>\n<li>\n\n    string kickstartFileContents - Contents of\n the kickstart file to import.\n </li>\n<li>\n\n    string updateType - Should the profile update\n itself to use the newest tree available? Possible values are: none (default),\n");
      out.write(" red_hat (only use Kickstart Trees synced from Red Hat), or all (includes\n custom Kickstart Trees).\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"isProfileDisabled\" href=\"#top\">Method: isProfileDisabled</a></h3>\nDescription:<br />\nReturns whether a kickstart profile is disabled\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string profileLabel - kickstart profile label\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\ntrue if profile is disabled \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listAllIpRanges\" href=\"#top\">Method: listAllIpRanges</a></h3>\nDescription:<br />\nList all Ip Ranges and their associated kickstarts available\n in the user's org.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n \n\n\t     struct - Kickstart Ip Range\n\t<ul>\n         <li> string \"ksLabel\" - The kickstart label associated with the ip range </li>\n");
      out.write("         <li> string \"max\" - The max ip of the range </li>\n         <li> string \"min\" - The min ip of the range </li>\n   \t</ul>\n  </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listKickstartableChannels\" href=\"#top\">Method: listKickstartableChannels</a></h3>\nDescription:<br />\nList kickstartable channels for the logged in user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n \n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"name\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"arch_name\"</li>\n      \t<li> string \"arch_label\"</li>\n      \t<li> string \"summary\"</li>\n      \t<li> string \"description\"</li>\n      \t<li> string \"checksum_label\"</li>\n      \t<li> dateTime.iso8601 \"last_modified\"</li>\n      \t<li> string \"maintainer_name\"</li>\n      \t<li> string \"maintainer_email\"</li>\n      \t<li> string \"maintainer_phone\"</li>\n      \t<li> string \"support_policy\"</li>\n      \t<li> string \"gpg_key_url\"</li>\n");
      out.write("      \t<li> string \"gpg_key_id\"</li>\n      \t<li> string \"gpg_key_fp\"</li>\n          <li> dateTime.iso8601 \"yumrepo_last_sync\" - (optional) </li>\n      \t<li> string \"end_of_life\"</li>\n      \t<li> string \"parent_channel_label\"</li>\n      \t<li> string \"clone_original\"</li>\n      array:\n  <ul>\n   <li>\n          \t     struct - contentSources\n\t<ul>\n              \t<li> int \"id\"</li>\n              \t<li> string \"label\"</li>\n              \t<li> string \"sourceUrl\"</li>\n              \t<li> string \"type\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listKickstartableTreeChannels\" href=\"#top\">Method: listKickstartableTreeChannels</a></h3>\nDescription:<br />\nList kickstartable tree channels for the logged in user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n \n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"name\"</li>\n      \t<li> string \"label\"</li>\n");
      out.write("      \t<li> string \"arch_name\"</li>\n      \t<li> string \"arch_label\"</li>\n      \t<li> string \"summary\"</li>\n      \t<li> string \"description\"</li>\n      \t<li> string \"checksum_label\"</li>\n      \t<li> dateTime.iso8601 \"last_modified\"</li>\n      \t<li> string \"maintainer_name\"</li>\n      \t<li> string \"maintainer_email\"</li>\n      \t<li> string \"maintainer_phone\"</li>\n      \t<li> string \"support_policy\"</li>\n      \t<li> string \"gpg_key_url\"</li>\n      \t<li> string \"gpg_key_id\"</li>\n      \t<li> string \"gpg_key_fp\"</li>\n          <li> dateTime.iso8601 \"yumrepo_last_sync\" - (optional) </li>\n      \t<li> string \"end_of_life\"</li>\n      \t<li> string \"parent_channel_label\"</li>\n      \t<li> string \"clone_original\"</li>\n      array:\n  <ul>\n   <li>\n          \t     struct - contentSources\n\t<ul>\n              \t<li> int \"id\"</li>\n              \t<li> string \"label\"</li>\n              \t<li> string \"sourceUrl\"</li>\n              \t<li> string \"type\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  </li></ul>\n \n</li></ul>\n</code>\n<p />\n");
      out.write("<hr />\n\n<h3 class=\"deprecated\"><a name=\"listKickstartableTrees\" href=\"#top\">Method: listKickstartableTrees</a></h3>\nDescription:<br />\nList the available kickstartable trees for the given channel.\n<p />\n\n\nDeprecated - being replaced by kickstart.tree.list(string sessionKey,\n string channelLabel) <p />\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string channelLabel - Label of channel to\n search.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n \n\n\t     struct - kickstartable tree\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> string \"label\"</li>\n   \t<li> string \"base_path\"</li>\n   \t<li> int \"channel_id\"</li>\n \t</ul>\n  </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listKickstarts\" href=\"#top\">Method: listKickstarts</a></h3>\nDescription:<br />\nProvides a list of kickstart profiles visible to the user's\n org\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n \n\n\t     struct - kickstart\n\t<ul>\n");
      out.write("          \t<li> string \"label\"</li>\n          \t<li> string \"tree_label\"</li>\n          \t<li> string \"name\"</li>\n          \t<li> boolean \"advanced_mode\"</li>\n          \t<li> boolean \"org_default\"</li>\n          \t<li> boolean \"active\"</li>\n          \t<li> string \"update_type\"</li>\n   \t</ul>\n  </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"renameProfile\" href=\"#top\">Method: renameProfile</a></h3>\nDescription:<br />\nRename a Kickstart Profile in Satellite\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string originalLabel - Label for the\n kickstart profile you want to rename\n </li>\n<li>\n\n    string newLabel - new label to change to\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
