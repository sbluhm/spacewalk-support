/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2020-03-09 19:26:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apidoc.handlers;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class SnapshotHandler_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n<head>\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n\n<style type=\"text/css\">\nul.apidoc {\n   list-style-image: url('/img/parent_node.gif');\n}\n\n.deprecated {\n   text-decoration: line-through;\n}\n</style>\n</head>\n<body>\n<div class=\"spacewalk-toolbar-h1\">\n<h1><i class=\"fa fa-gears\"></i>API Overview</h1>\n</div>\n\n<h2>Description</h2>\n<p><strong>Namespace</strong>:\nsystem.provisioning.snapshot\n</p>\n<p>Provides methods to access and delete system snapshots.</p>\n<span class=\"small-text\">( <a href=\"/rhn/apidoc/index.jsp\">Return to API Overview</a> )</span>\n<hr />\n\n<div class=\"rounded-box\">\n<h2><a name=\"top\">Available methods</a></h2>\n<ul class=\"apidoc\">\n\n<li><a href=\"#addTagToSnapshot\"/>addTagToSnapshot</a></li>\n<li><a href=\"#deleteSnapshot\"/>deleteSnapshot</a></li>\n<li><a href=\"#deleteSnapshots\"/>deleteSnapshots</a></li>\n<li><a href=\"#deleteSnapshots\"/>deleteSnapshots</a></li>\n<li><a href=\"#listSnapshotConfigFiles\"/>listSnapshotConfigFiles</a></li>\n<li><a href=\"#listSnapshotPackages\"/>listSnapshotPackages</a></li>\n");
      out.write("<li><a href=\"#listSnapshots\"/>listSnapshots</a></li>\n<li><a href=\"#rollbackToSnapshot\"/>rollbackToSnapshot</a></li>\n<li><a href=\"#rollbackToTag\"/>rollbackToTag</a></li>\n<li><a href=\"#rollbackToTag\"/>rollbackToTag</a></li>\n</ul>\n</div>\n<hr />\n\n<h3> <a name=\"addTagToSnapshot\" href=\"#top\">Method: addTagToSnapshot</a></h3>\nDescription:<br />\nAdds tag to snapshot\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int snapshotId - Id of the snapshot\n </li>\n<li>\n\n    string tag - Name of the snapshot tag\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"deleteSnapshot\" href=\"#top\">Method: deleteSnapshot</a></h3>\nDescription:<br />\nDeletes a snapshot with the given snapshot id\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int snapshotId - Id of snapshot to delete\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n");
      out.write(" \n</li></ul>\n</code>\n<p />\nAvailable since: 10.1 <p />\n<hr />\n\n<h3> <a name=\"deleteSnapshots\" href=\"#top\">Method: deleteSnapshots</a></h3>\nDescription:<br />\nDeletes all snapshots across multiple systems based on the given date\n criteria.  For example,\n <ul>\n <li>If the user provides startDate only, all snapshots created either on or after\n the date provided will be removed.</li>\n <li>If user provides startDate and endDate, all snapshots created on or between the\n dates provided will be removed.</li>\n <li>If the user doesn't provide a startDate and endDate, all snapshots will be\n removed.</li>\n </ul>\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n\t     struct - date details\n\t<ul>\n             <li> dateTime.iso8601 \"startDate\" - Optional, unless endDate\n         is provided. </li>\n             <li> dateTime.iso8601 \"endDate\" - Optional. </li>\n     \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\nAvailable since: 10.1 <p />\n");
      out.write("<hr />\n\n<h3> <a name=\"deleteSnapshots\" href=\"#top\">Method: deleteSnapshots</a></h3>\nDescription:<br />\nDeletes all snapshots for a given system based on the date\n criteria.  For example,\n <ul>\n <li>If the user provides startDate only, all snapshots created either on or after\n the date provided will be removed.</li>\n <li>If user provides startDate and endDate, all snapshots created on or between the\n dates provided will be removed.</li>\n <li>If the user doesn't provide a startDate and endDate, all snapshots associated\n with the server will be removed.</li>\n </ul>\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int sid - system id of system to delete\n          snapshots for\n </li>\n<li>\n\n\t     struct - date details\n\t<ul>\n             <li> dateTime.iso8601 \"startDate\" - Optional, unless endDate\n         is provided. </li>\n             <li> dateTime.iso8601 \"endDate\" - Optional. </li>\n     \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n");
      out.write(" \n</li></ul>\n</code>\n<p />\nAvailable since: 10.1 <p />\n<hr />\n\n<h3> <a name=\"listSnapshotConfigFiles\" href=\"#top\">Method: listSnapshotConfigFiles</a></h3>\nDescription:<br />\nList the config files associated with a snapshot.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int snapId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n         \n\n\t     struct - Configuration Revision information\n\t<ul>\n   \t<li> string \"type\"</li>\n              \t<ul>\n                  \t<li>file</li>\n                  \t<li>directory</li>\n                  \t<li>symlink</li>\n              \t</ul>\n       <li> string \"path\" - File Path </li>\n       <li> string \"target_path\" - Symbolic link Target File Path.\n                              Present for Symbolic links only. </li>\n       <li> string \"channel\" - Channel Name </li>\n       <li> string \"contents\" - File contents (base64 encoded according\n                to the contents_enc64 attribute) </li>\n       <li> boolean \"contents_enc64\" -  Identifies base64 encoded content </li>\n");
      out.write("       <li> int \"revision\" - File Revision </li>\n       <li> dateTime.iso8601 \"creation\" - Creation Date </li>\n       <li> dateTime.iso8601 \"modified\" - Last Modified Date </li>\n       <li> string \"owner\" - File Owner. Present for files or directories only. </li>\n       <li> string \"group\" - File Group. Present for files or directories only. </li>\n       <li> int \"permissions\" - File Permissions (Deprecated).\n                                  Present for files or directories only. </li>\n       <li> string \"permissions_mode\" - File Permissions.\n                                      Present for files or directories only. </li>\n       <li> string \"selinux_ctx\" - SELinux Context (optional). </li>\n       <li> boolean \"binary\" - true/false , Present for files only. </li>\n       <li> string \"sha256\" - File's sha256 signature. Present for files only. </li>\n       <li> string \"macro-start-delimiter\" - Macro start delimiter for a config file. Present for text files only. </li>\n       <li> string \"macro-end-delimiter\" - Macro end delimiter for a config file. Present for text files only. </li>\n");
      out.write(" \t</ul>\n \n     </li></ul>\n \n</li></ul>\n</code>\n<p />\nAvailable since: 10.2 <p />\n<hr />\n\n<h3> <a name=\"listSnapshotPackages\" href=\"#top\">Method: listSnapshotPackages</a></h3>\nDescription:<br />\nList the packages associated with a snapshot.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int snapId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n         \n\n\t     struct - package nvera\n\t<ul>\n      \t<li> string \"name\"</li>\n      \t<li> string \"epoch\"</li>\n      \t<li> string \"version\"</li>\n      \t<li> string \"release\"</li>\n      \t<li> string \"arch\"</li>\n  \t</ul>\n \n     </li></ul>\n \n</li></ul>\n</code>\n<p />\nAvailable since: 10.1 <p />\n<hr />\n\n<h3> <a name=\"listSnapshots\" href=\"#top\">Method: listSnapshots</a></h3>\nDescription:<br />\nList snapshots for a given system.\n A user may optionally provide a start and end date to narrow the snapshots that\n will be listed.  For example,\n <ul>\n <li>If the user provides startDate only, all snapshots created either on or after\n");
      out.write(" the date provided will be returned.</li>\n <li>If user provides startDate and endDate, all snapshots created on or between the\n dates provided will be returned.</li>\n <li>If the user doesn't provide a startDate and endDate, all snapshots associated\n with the server will be returned.</li>\n </ul>\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int serverId\n </li>\n<li>\n\n\t     struct - date details\n\t<ul>\n             <li> dateTime.iso8601 \"startDate\" - Optional, unless endDate\n         is provided. </li>\n             <li> dateTime.iso8601 \"endDate\" - Optional. </li>\n     \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n      \n\n\t     struct - server snapshot\n\t<ul>\n      \t<li> int \"id\"</li>\n          <li> string \"reason\" - the reason for the snapshot's existence </li>\n      \t<li> dateTime.iso8601 \"created\"</li>\n          <li>array \"channels\"\n        <ul>\n            <li>string labels of channels associated with the\n              snapshot</li>\n        </ul>\n    </li>\n");
      out.write("          <li>array \"groups\"\n        <ul>\n            <li>string Names of server groups associated with\n              the snapshot</li>\n        </ul>\n    </li>\n          <li>array \"entitlements\"\n        <ul>\n            <li>string Names of system entitlements associated\n              with the snapshot</li>\n        </ul>\n    </li>\n           <li>array \"config_channels\"\n        <ul>\n            <li>string Labels of config channels the snapshot\n                  is associated with.</li>\n        </ul>\n    </li>\n          <li>array \"tags\"\n        <ul>\n            <li>string Tag names associated with this snapshot.</li>\n        </ul>\n    </li>\n          <li> string \"Invalid_reason\" - If the snapshot is invalid, this is the\n                  reason (optional). </li>\n  \t</ul>\n \n  </li></ul>\n \n</li></ul>\n</code>\n<p />\nAvailable since: 10.1 <p />\n<hr />\n\n<h3> <a name=\"rollbackToSnapshot\" href=\"#top\">Method: rollbackToSnapshot</a></h3>\nDescription:<br />\nRollbacks server to snapshot\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n");
      out.write("\n        string sessionKey\n </li>\n<li>\n\n    int serverId\n </li>\n<li>\n\n    int snapshotId - Id of the snapshot\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"rollbackToTag\" href=\"#top\">Method: rollbackToTag</a></h3>\nDescription:<br />\nRollbacks server to snapshot\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int serverId\n </li>\n<li>\n\n    string tagName - Name of the snapshot tag\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"rollbackToTag\" href=\"#top\">Method: rollbackToTag</a></h3>\nDescription:<br />\nRollbacks server to snapshot\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string tagName - Name of the snapshot tag\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
