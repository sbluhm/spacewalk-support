/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2020-03-09 19:26:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apidoc.handlers;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ConfigChannelHandler_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n<head>\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n\n<style type=\"text/css\">\nul.apidoc {\n   list-style-image: url('/img/parent_node.gif');\n}\n\n.deprecated {\n   text-decoration: line-through;\n}\n</style>\n</head>\n<body>\n<div class=\"spacewalk-toolbar-h1\">\n<h1><i class=\"fa fa-gears\"></i>API Overview</h1>\n</div>\n\n<h2>Description</h2>\n<p><strong>Namespace</strong>:\nconfigchannel\n</p>\n<p>Provides methods to access and modify many aspects of\n configuration channels.</p>\n<span class=\"small-text\">( <a href=\"/rhn/apidoc/index.jsp\">Return to API Overview</a> )</span>\n<hr />\n\n<div class=\"rounded-box\">\n<h2><a name=\"top\">Available methods</a></h2>\n<ul class=\"apidoc\">\n\n<li><a href=\"#channelExists\"/>channelExists</a></li>\n<li><a href=\"#create\"/>create</a></li>\n<li><a href=\"#createOrUpdatePath\"/>createOrUpdatePath</a></li>\n<li><a href=\"#createOrUpdateSymlink\"/>createOrUpdateSymlink</a></li>\n<li><a href=\"#deleteChannels\"/>deleteChannels</a></li>\n<li><a href=\"#deleteFileRevisions\"/>deleteFileRevisions</a></li>\n<li><a href=\"#deleteFiles\"/>deleteFiles</a></li>\n");
      out.write("<li><a href=\"#deployAllSystems\"/>deployAllSystems</a></li>\n<li><a href=\"#deployAllSystems\"/>deployAllSystems</a></li>\n<li><a href=\"#deployAllSystems\"/>deployAllSystems</a></li>\n<li><a href=\"#deployAllSystems\"/>deployAllSystems</a></li>\n<li><a href=\"#getDetails\"/>getDetails</a></li>\n<li><a href=\"#getDetails\"/>getDetails</a></li>\n<li><a href=\"#getEncodedFileRevision\"/>getEncodedFileRevision</a></li>\n<li><a href=\"#getFileRevision\"/>getFileRevision</a></li>\n<li><a href=\"#getFileRevisions\"/>getFileRevisions</a></li>\n<li><a href=\"#listFiles\"/>listFiles</a></li>\n<li><a href=\"#listGlobals\"/>listGlobals</a></li>\n<li><a href=\"#listSubscribedSystems\"/>listSubscribedSystems</a></li>\n<li><a href=\"#lookupChannelInfo\"/>lookupChannelInfo</a></li>\n<li><a href=\"#lookupFileInfo\"/>lookupFileInfo</a></li>\n<li><a href=\"#lookupFileInfo\"/>lookupFileInfo</a></li>\n<li><a href=\"#scheduleFileComparisons\"/>scheduleFileComparisons</a></li>\n<li><a href=\"#update\"/>update</a></li>\n</ul>\n</div>\n<hr />\n\n<h3> <a name=\"channelExists\" href=\"#top\">Method: channelExists</a></h3>\n");
      out.write("Description:<br />\nCheck for the existence of the config channel provided.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - Channel to check for.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n1 if exists, 0 otherwise. \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"create\" href=\"#top\">Method: create</a></h3>\nDescription:<br />\nCreate a new global config channel. Caller must be at least a\n config admin or an organization admin.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel\n </li>\n<li>\n\n    string channelName\n </li>\n<li>\n\n    string channelDescription\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Configuration Channel information\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> int \"orgId\"</li>\n   \t<li> string \"label\"</li>\n   \t<li> string \"name\"</li>\n   \t<li> string \"description\"</li>\n   \t<li> struct \"configChannelType\"</li>\n   \n\n\t     struct - Configuration Channel Type information\n\t<ul>\n   \t<li> int \"id\"</li>\n");
      out.write("   \t<li> string \"label\"</li>\n   \t<li> string \"name\"</li>\n   \t<li> int \"priority\"</li>\n \t</ul>\n \n \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"createOrUpdatePath\" href=\"#top\">Method: createOrUpdatePath</a></h3>\nDescription:<br />\nCreate a new file or directory with the given path, or\n update an existing path.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string configChannelLabel\n </li>\n<li>\n\n    string path\n </li>\n<li>\n\n    boolean isDir - True if the path is a directory, False if it is a file.\n </li>\n<li>\n\n\t     struct - path info\n\t<ul>\n          <li> string \"contents\" - Contents of the file (text or base64 encoded if binary).\n                   (only for non-directories) </li>\n          <li> boolean \"contents_enc64\" - Identifies base64 encoded content\n                   (default: disabled, only for non-directories) </li>\n          <li> string \"owner\" - Owner of the file/directory. </li>\n          <li> string \"group\" - Group name of the file/directory. </li>\n          <li> string \"permissions\" - Octal file/directory permissions (eg: 644) </li>\n");
      out.write("          <li> string \"selinux_ctx\" - SELinux Security context (optional) </li>\n          <li> string \"macro-start-delimiter\" - Config file macro start delimiter. Use null or empty\n                  string to accept the default. (only for non-directories) </li>\n          <li> string \"macro-end-delimiter\" - Config file macro end delimiter. Use null or\n  empty string to accept the default. (only for non-directories) </li>\n          <li> int \"revision\" - next revision number, auto increment for null </li>\n          <li> boolean \"binary\" - mark the binary content, if True,\n      base64 encoded content is expected (only for non-directories) </li>\n\n  \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Configuration Revision information\n\t<ul>\n   \t<li> string \"type\"</li>\n              \t<ul>\n                  \t<li>file</li>\n                  \t<li>directory</li>\n                  \t<li>symlink</li>\n              \t</ul>\n       <li> string \"path\" - File Path </li>\n       <li> string \"target_path\" - Symbolic link Target File Path.\n");
      out.write("                              Present for Symbolic links only. </li>\n       <li> string \"channel\" - Channel Name </li>\n       <li> string \"contents\" - File contents (base64 encoded according\n                to the contents_enc64 attribute) </li>\n       <li> boolean \"contents_enc64\" -  Identifies base64 encoded content </li>\n       <li> int \"revision\" - File Revision </li>\n       <li> dateTime.iso8601 \"creation\" - Creation Date </li>\n       <li> dateTime.iso8601 \"modified\" - Last Modified Date </li>\n       <li> string \"owner\" - File Owner. Present for files or directories only. </li>\n       <li> string \"group\" - File Group. Present for files or directories only. </li>\n       <li> int \"permissions\" - File Permissions (Deprecated).\n                                  Present for files or directories only. </li>\n       <li> string \"permissions_mode\" - File Permissions.\n                                      Present for files or directories only. </li>\n       <li> string \"selinux_ctx\" - SELinux Context (optional). </li>\n");
      out.write("       <li> boolean \"binary\" - true/false , Present for files only. </li>\n       <li> string \"sha256\" - File's sha256 signature. Present for files only. </li>\n       <li> string \"macro-start-delimiter\" - Macro start delimiter for a config file. Present for text files only. </li>\n       <li> string \"macro-end-delimiter\" - Macro end delimiter for a config file. Present for text files only. </li>\n \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\nAvailable since: 10.2 <p />\n<hr />\n\n<h3> <a name=\"createOrUpdateSymlink\" href=\"#top\">Method: createOrUpdateSymlink</a></h3>\nDescription:<br />\nCreate a new symbolic link with the given path, or\n update an existing path.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string configChannelLabel\n </li>\n<li>\n\n    string path\n </li>\n<li>\n\n\t     struct - path info\n\t<ul>\n          <li> string \"target_path\" - The target path for the symbolic link </li>\n          <li> string \"selinux_ctx\" - SELinux Security context (optional) </li>\n          <li> int \"revision\" - next revision number,\n");
      out.write("       skip this field for automatic revision number assignment </li>\n  \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Configuration Revision information\n\t<ul>\n   \t<li> string \"type\"</li>\n              \t<ul>\n                  \t<li>file</li>\n                  \t<li>directory</li>\n                  \t<li>symlink</li>\n              \t</ul>\n       <li> string \"path\" - File Path </li>\n       <li> string \"target_path\" - Symbolic link Target File Path.\n                              Present for Symbolic links only. </li>\n       <li> string \"channel\" - Channel Name </li>\n       <li> string \"contents\" - File contents (base64 encoded according\n                to the contents_enc64 attribute) </li>\n       <li> boolean \"contents_enc64\" -  Identifies base64 encoded content </li>\n       <li> int \"revision\" - File Revision </li>\n       <li> dateTime.iso8601 \"creation\" - Creation Date </li>\n       <li> dateTime.iso8601 \"modified\" - Last Modified Date </li>\n       <li> string \"owner\" - File Owner. Present for files or directories only. </li>\n");
      out.write("       <li> string \"group\" - File Group. Present for files or directories only. </li>\n       <li> int \"permissions\" - File Permissions (Deprecated).\n                                  Present for files or directories only. </li>\n       <li> string \"permissions_mode\" - File Permissions.\n                                      Present for files or directories only. </li>\n       <li> string \"selinux_ctx\" - SELinux Context (optional). </li>\n       <li> boolean \"binary\" - true/false , Present for files only. </li>\n       <li> string \"sha256\" - File's sha256 signature. Present for files only. </li>\n       <li> string \"macro-start-delimiter\" - Macro start delimiter for a config file. Present for text files only. </li>\n       <li> string \"macro-end-delimiter\" - Macro end delimiter for a config file. Present for text files only. </li>\n \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\nAvailable since: 10.2 <p />\n<hr />\n\n<h3> <a name=\"deleteChannels\" href=\"#top\">Method: deleteChannels</a></h3>\nDescription:<br />\nDelete a list of global config channels.\n");
      out.write(" Caller must be a config admin.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - configuration channel labels to delete.</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"deleteFileRevisions\" href=\"#top\">Method: deleteFileRevisions</a></h3>\nDescription:<br />\nDelete specified revisions of a given configuration file\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - Label of config channel to lookup on.\n </li>\n<li>\n\n    string filePath - Configuration file path.\n </li>\n<li>\n\narray:\n<ul>\n    <li>int - List of revisions to delete</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"deleteFiles\" href=\"#top\">Method: deleteFiles</a></h3>\nDescription:<br />\nRemove file paths from a global channel.\n<p />\n");
      out.write("\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - Channel to remove the files from.\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - file paths to remove.</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"deployAllSystems\" href=\"#top\">Method: deployAllSystems</a></h3>\nDescription:<br />\nSchedule an immediate configuration deployment for all systems\n    subscribed to a particular configuration channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - The configuration channel's label.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"deployAllSystems\" href=\"#top\">Method: deployAllSystems</a></h3>\nDescription:<br />\nSchedule a configuration deployment for all systems\n    subscribed to a particular configuration channel.\n");
      out.write("<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - The configuration channel's label.\n </li>\n<li>\n\n    dateTime.iso8601 date - The date to schedule the action\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"deployAllSystems\" href=\"#top\">Method: deployAllSystems</a></h3>\nDescription:<br />\nSchedule a configuration deployment of a certain file for all systems\n    subscribed to a particular configuration channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - The configuration channel's label.\n </li>\n<li>\n\n    string filePath - The configuration file path.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"deployAllSystems\" href=\"#top\">Method: deployAllSystems</a></h3>\nDescription:<br />\nSchedule a configuration deployment of a certain file for all systems\n");
      out.write("    subscribed to a particular configuration channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - The configuration channel's label.\n </li>\n<li>\n\n    string filePath - The configuration file path.\n </li>\n<li>\n\n    dateTime.iso8601 date - The date to schedule the action\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getDetails\" href=\"#top\">Method: getDetails</a></h3>\nDescription:<br />\nLookup config channel details.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Configuration Channel information\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> int \"orgId\"</li>\n   \t<li> string \"label\"</li>\n   \t<li> string \"name\"</li>\n   \t<li> string \"description\"</li>\n   \t<li> struct \"configChannelType\"</li>\n   \n\n\t     struct - Configuration Channel Type information\n\t<ul>\n");
      out.write("   \t<li> int \"id\"</li>\n   \t<li> string \"label\"</li>\n   \t<li> string \"name\"</li>\n   \t<li> int \"priority\"</li>\n \t</ul>\n \n \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getDetails\" href=\"#top\">Method: getDetails</a></h3>\nDescription:<br />\nLookup config channel details.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\nint channelId \n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Configuration Channel information\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> int \"orgId\"</li>\n   \t<li> string \"label\"</li>\n   \t<li> string \"name\"</li>\n   \t<li> string \"description\"</li>\n   \t<li> struct \"configChannelType\"</li>\n   \n\n\t     struct - Configuration Channel Type information\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> string \"label\"</li>\n   \t<li> string \"name\"</li>\n   \t<li> int \"priority\"</li>\n \t</ul>\n \n \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getEncodedFileRevision\" href=\"#top\">Method: getEncodedFileRevision</a></h3>\nDescription:<br />\nGet revision of the specified configuration file and transmit the\n");
      out.write("             contents as base64 encoded.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string configChannelLabel - label of config channel to lookup on\n </li>\n<li>\n\n    string filePath - config file path to examine\n </li>\n<li>\n\n    int revision - config file revision to examine\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Configuration Revision information\n\t<ul>\n   \t<li> string \"type\"</li>\n              \t<ul>\n                  \t<li>file</li>\n                  \t<li>directory</li>\n                  \t<li>symlink</li>\n              \t</ul>\n       <li> string \"path\" - File Path </li>\n       <li> string \"target_path\" - Symbolic link Target File Path.\n                              Present for Symbolic links only. </li>\n       <li> string \"channel\" - Channel Name </li>\n       <li> string \"contents\" - File contents (base64 encoded according\n                to the contents_enc64 attribute) </li>\n       <li> boolean \"contents_enc64\" -  Identifies base64 encoded content </li>\n");
      out.write("       <li> int \"revision\" - File Revision </li>\n       <li> dateTime.iso8601 \"creation\" - Creation Date </li>\n       <li> dateTime.iso8601 \"modified\" - Last Modified Date </li>\n       <li> string \"owner\" - File Owner. Present for files or directories only. </li>\n       <li> string \"group\" - File Group. Present for files or directories only. </li>\n       <li> int \"permissions\" - File Permissions (Deprecated).\n                                  Present for files or directories only. </li>\n       <li> string \"permissions_mode\" - File Permissions.\n                                      Present for files or directories only. </li>\n       <li> string \"selinux_ctx\" - SELinux Context (optional). </li>\n       <li> boolean \"binary\" - true/false , Present for files only. </li>\n       <li> string \"sha256\" - File's sha256 signature. Present for files only. </li>\n       <li> string \"macro-start-delimiter\" - Macro start delimiter for a config file. Present for text files only. </li>\n       <li> string \"macro-end-delimiter\" - Macro end delimiter for a config file. Present for text files only. </li>\n");
      out.write(" \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getFileRevision\" href=\"#top\">Method: getFileRevision</a></h3>\nDescription:<br />\nGet revision of the specified config file\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string configChannelLabel - label of config channel to lookup on\n </li>\n<li>\n\n    string filePath - config file path to examine\n </li>\n<li>\n\n    int revision - config file revision to examine\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Configuration Revision information\n\t<ul>\n   \t<li> string \"type\"</li>\n              \t<ul>\n                  \t<li>file</li>\n                  \t<li>directory</li>\n                  \t<li>symlink</li>\n              \t</ul>\n       <li> string \"path\" - File Path </li>\n       <li> string \"target_path\" - Symbolic link Target File Path.\n                              Present for Symbolic links only. </li>\n       <li> string \"channel\" - Channel Name </li>\n       <li> string \"contents\" - File contents (base64 encoded according\n");
      out.write("                to the contents_enc64 attribute) </li>\n       <li> boolean \"contents_enc64\" -  Identifies base64 encoded content </li>\n       <li> int \"revision\" - File Revision </li>\n       <li> dateTime.iso8601 \"creation\" - Creation Date </li>\n       <li> dateTime.iso8601 \"modified\" - Last Modified Date </li>\n       <li> string \"owner\" - File Owner. Present for files or directories only. </li>\n       <li> string \"group\" - File Group. Present for files or directories only. </li>\n       <li> int \"permissions\" - File Permissions (Deprecated).\n                                  Present for files or directories only. </li>\n       <li> string \"permissions_mode\" - File Permissions.\n                                      Present for files or directories only. </li>\n       <li> string \"selinux_ctx\" - SELinux Context (optional). </li>\n       <li> boolean \"binary\" - true/false , Present for files only. </li>\n       <li> string \"sha256\" - File's sha256 signature. Present for files only. </li>\n       <li> string \"macro-start-delimiter\" - Macro start delimiter for a config file. Present for text files only. </li>\n");
      out.write("       <li> string \"macro-end-delimiter\" - Macro end delimiter for a config file. Present for text files only. </li>\n \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getFileRevisions\" href=\"#top\">Method: getFileRevisions</a></h3>\nDescription:<br />\nGet list of revisions for specified config file\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - label of config channel to lookup on\n </li>\n<li>\n\n    string filePath - config file path to examine\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n \n\n\t     struct - Configuration Revision information\n\t<ul>\n   \t<li> string \"type\"</li>\n              \t<ul>\n                  \t<li>file</li>\n                  \t<li>directory</li>\n                  \t<li>symlink</li>\n              \t</ul>\n       <li> string \"path\" - File Path </li>\n       <li> string \"target_path\" - Symbolic link Target File Path.\n                              Present for Symbolic links only. </li>\n       <li> string \"channel\" - Channel Name </li>\n");
      out.write("       <li> string \"contents\" - File contents (base64 encoded according\n                to the contents_enc64 attribute) </li>\n       <li> boolean \"contents_enc64\" -  Identifies base64 encoded content </li>\n       <li> int \"revision\" - File Revision </li>\n       <li> dateTime.iso8601 \"creation\" - Creation Date </li>\n       <li> dateTime.iso8601 \"modified\" - Last Modified Date </li>\n       <li> string \"owner\" - File Owner. Present for files or directories only. </li>\n       <li> string \"group\" - File Group. Present for files or directories only. </li>\n       <li> int \"permissions\" - File Permissions (Deprecated).\n                                  Present for files or directories only. </li>\n       <li> string \"permissions_mode\" - File Permissions.\n                                      Present for files or directories only. </li>\n       <li> string \"selinux_ctx\" - SELinux Context (optional). </li>\n       <li> boolean \"binary\" - true/false , Present for files only. </li>\n       <li> string \"sha256\" - File's sha256 signature. Present for files only. </li>\n");
      out.write("       <li> string \"macro-start-delimiter\" - Macro start delimiter for a config file. Present for text files only. </li>\n       <li> string \"macro-end-delimiter\" - Macro end delimiter for a config file. Present for text files only. </li>\n \t</ul>\n \n </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listFiles\" href=\"#top\">Method: listFiles</a></h3>\nDescription:<br />\nReturn a list of files in a channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - label of config channel to list files on.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n \n\n\t     struct - Configuration File information\n\t<ul>\n   \t<li> string \"type\"</li>\n              \t<ul>\n                  \t<li>file</li>\n                  \t<li>directory</li>\n                  \t<li>symlink</li>\n              \t</ul>\n       <li> string \"path\" - File Path </li>\n       <li> dateTime.iso8601 \"last_modified\" - Last Modified Date </li>\n \t</ul>\n \n </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n");
      out.write("\n<h3> <a name=\"listGlobals\" href=\"#top\">Method: listGlobals</a></h3>\nDescription:<br />\nList all the global config channels accessible to the logged-in user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n  \n\n\t     struct - Configuration Channel information\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> int \"orgId\"</li>\n   \t<li> string \"label\"</li>\n   \t<li> string \"name\"</li>\n   \t<li> string \"description\"</li>\n   \t<li> string \"type\"</li>\n   \t<li> struct \"configChannelType\"</li>\n   \n\n\t     struct - Configuration Channel Type information\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> string \"label\"</li>\n   \t<li> string \"name\"</li>\n   \t<li> int \"priority\"</li>\n \t</ul>\n \n \t</ul>\n \n </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listSubscribedSystems\" href=\"#top\">Method: listSubscribedSystems</a></h3>\nDescription:<br />\nReturn a list of systems subscribed to a configuration channel\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n");
      out.write(" </li>\n<li>\n\n    string channelLabel - label of config channel to list subscribed systems.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n \n\n\t     struct - system\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> string \"name\"</li>\n \t</ul>\n \n </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"lookupChannelInfo\" href=\"#top\">Method: lookupChannelInfo</a></h3>\nDescription:<br />\nLists details on a list channels given their channel labels.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - configuration channel label</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n  \n\n\t     struct - Configuration Channel information\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> int \"orgId\"</li>\n   \t<li> string \"label\"</li>\n   \t<li> string \"name\"</li>\n   \t<li> string \"description\"</li>\n   \t<li> struct \"configChannelType\"</li>\n   \n\n\t     struct - Configuration Channel Type information\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> string \"label\"</li>\n");
      out.write("   \t<li> string \"name\"</li>\n   \t<li> int \"priority\"</li>\n \t</ul>\n \n \t</ul>\n \n </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"lookupFileInfo\" href=\"#top\">Method: lookupFileInfo</a></h3>\nDescription:<br />\nGiven a list of paths and a channel, returns details about\n the latest revisions of the paths.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - label of config channel to lookup on\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - List of paths to examine.</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n \n\n\t     struct - Configuration Revision information\n\t<ul>\n   \t<li> string \"type\"</li>\n              \t<ul>\n                  \t<li>file</li>\n                  \t<li>directory</li>\n                  \t<li>symlink</li>\n              \t</ul>\n       <li> string \"path\" - File Path </li>\n       <li> string \"target_path\" - Symbolic link Target File Path.\n                              Present for Symbolic links only. </li>\n       <li> string \"channel\" - Channel Name </li>\n");
      out.write("       <li> string \"contents\" - File contents (base64 encoded according\n                to the contents_enc64 attribute) </li>\n       <li> boolean \"contents_enc64\" -  Identifies base64 encoded content </li>\n       <li> int \"revision\" - File Revision </li>\n       <li> dateTime.iso8601 \"creation\" - Creation Date </li>\n       <li> dateTime.iso8601 \"modified\" - Last Modified Date </li>\n       <li> string \"owner\" - File Owner. Present for files or directories only. </li>\n       <li> string \"group\" - File Group. Present for files or directories only. </li>\n       <li> int \"permissions\" - File Permissions (Deprecated).\n                                  Present for files or directories only. </li>\n       <li> string \"permissions_mode\" - File Permissions.\n                                      Present for files or directories only. </li>\n       <li> string \"selinux_ctx\" - SELinux Context (optional). </li>\n       <li> boolean \"binary\" - true/false , Present for files only. </li>\n       <li> string \"sha256\" - File's sha256 signature. Present for files only. </li>\n");
      out.write("       <li> string \"macro-start-delimiter\" - Macro start delimiter for a config file. Present for text files only. </li>\n       <li> string \"macro-end-delimiter\" - Macro end delimiter for a config file. Present for text files only. </li>\n \t</ul>\n \n </li></ul>\n \n</li></ul>\n</code>\n<p />\nAvailable since: 10.2 <p />\n<hr />\n\n<h3> <a name=\"lookupFileInfo\" href=\"#top\">Method: lookupFileInfo</a></h3>\nDescription:<br />\nGiven a path, revision number, and a channel, returns details about\n the latest revisions of the paths.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - label of config channel to lookup on\n </li>\n<li>\n\n    string path - path of file/directory\n </li>\n<li>\n\n    int revsion - The revision number.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Configuration Revision information\n\t<ul>\n   \t<li> string \"type\"</li>\n              \t<ul>\n                  \t<li>file</li>\n                  \t<li>directory</li>\n                  \t<li>symlink</li>\n");
      out.write("              \t</ul>\n       <li> string \"path\" - File Path </li>\n       <li> string \"target_path\" - Symbolic link Target File Path.\n                              Present for Symbolic links only. </li>\n       <li> string \"channel\" - Channel Name </li>\n       <li> string \"contents\" - File contents (base64 encoded according\n                to the contents_enc64 attribute) </li>\n       <li> boolean \"contents_enc64\" -  Identifies base64 encoded content </li>\n       <li> int \"revision\" - File Revision </li>\n       <li> dateTime.iso8601 \"creation\" - Creation Date </li>\n       <li> dateTime.iso8601 \"modified\" - Last Modified Date </li>\n       <li> string \"owner\" - File Owner. Present for files or directories only. </li>\n       <li> string \"group\" - File Group. Present for files or directories only. </li>\n       <li> int \"permissions\" - File Permissions (Deprecated).\n                                  Present for files or directories only. </li>\n       <li> string \"permissions_mode\" - File Permissions.\n                                      Present for files or directories only. </li>\n");
      out.write("       <li> string \"selinux_ctx\" - SELinux Context (optional). </li>\n       <li> boolean \"binary\" - true/false , Present for files only. </li>\n       <li> string \"sha256\" - File's sha256 signature. Present for files only. </li>\n       <li> string \"macro-start-delimiter\" - Macro start delimiter for a config file. Present for text files only. </li>\n       <li> string \"macro-end-delimiter\" - Macro end delimiter for a config file. Present for text files only. </li>\n \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\nAvailable since: 10.12 <p />\n<hr />\n\n<h3> <a name=\"scheduleFileComparisons\" href=\"#top\">Method: scheduleFileComparisons</a></h3>\nDescription:<br />\nSchedule a comparison of the latest revision of a file\n against the version deployed on a list of systems.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - Label of config channel\n </li>\n<li>\n\n    string path - File path\n </li>\n<li>\n\narray:\n<ul>\n    <li>long - The list of server id that the\n comparison will be performed on</li>\n");
      out.write("</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nint actionId - The action id of the scheduled action \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"update\" href=\"#top\">Method: update</a></h3>\nDescription:<br />\nUpdate a global config channel. Caller must be at least a\n config admin or an organization admin, or have access to a system containing this\n config channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\nstring channelLabel \n </li>\n<li>\n\nstring channelName \n </li>\n<li>\n\nstring description \n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Configuration Channel information\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> int \"orgId\"</li>\n   \t<li> string \"label\"</li>\n   \t<li> string \"name\"</li>\n   \t<li> string \"description\"</li>\n   \t<li> struct \"configChannelType\"</li>\n   \n\n\t     struct - Configuration Channel Type information\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> string \"label\"</li>\n   \t<li> string \"name\"</li>\n   \t<li> int \"priority\"</li>\n \t</ul>\n \n \t</ul>\n  \n \n</li></ul>\n");
      out.write("</code>\n<p />\n<hr />\n</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
