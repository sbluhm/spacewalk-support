/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2020-03-09 19:26:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apidoc.handlers;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ErrataHandler_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n<head>\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n\n<style type=\"text/css\">\nul.apidoc {\n   list-style-image: url('/img/parent_node.gif');\n}\n\n.deprecated {\n   text-decoration: line-through;\n}\n</style>\n</head>\n<body>\n<div class=\"spacewalk-toolbar-h1\">\n<h1><i class=\"fa fa-gears\"></i>API Overview</h1>\n</div>\n\n<h2>Description</h2>\n<p><strong>Namespace</strong>:\nerrata\n</p>\n<p>Provides methods to access and modify errata.</p>\n<span class=\"small-text\">( <a href=\"/rhn/apidoc/index.jsp\">Return to API Overview</a> )</span>\n<hr />\n\n<div class=\"rounded-box\">\n<h2><a name=\"top\">Available methods</a></h2>\n<ul class=\"apidoc\">\n\n<li><a href=\"#addPackages\"/>addPackages</a></li>\n<li><a href=\"#applicableToChannels\"/>applicableToChannels</a></li>\n<li><a href=\"#bugzillaFixes\"/>bugzillaFixes</a></li>\n<li><a href=\"#clone\"/>clone</a></li>\n<li><a href=\"#cloneAsOriginal\"/>cloneAsOriginal</a></li>\n<li><a href=\"#cloneAsOriginalAsync\"/>cloneAsOriginalAsync</a></li>\n<li><a href=\"#cloneAsync\"/>cloneAsync</a></li>\n<li><a href=\"#create\"/>create</a></li>\n");
      out.write("<li><a href=\"#delete\"/>delete</a></li>\n<li><a href=\"#findByCve\"/>findByCve</a></li>\n<li><a href=\"#getDetails\"/>getDetails</a></li>\n<li><a href=\"#listAffectedSystems\"/>listAffectedSystems</a></li>\n<li><a href=\"#listByDate\"/>listByDate</a></li>\n<li><a href=\"#listCves\"/>listCves</a></li>\n<li><a href=\"#listKeywords\"/>listKeywords</a></li>\n<li><a href=\"#listPackages\"/>listPackages</a></li>\n<li><a href=\"#listUnpublishedErrata\"/>listUnpublishedErrata</a></li>\n<li><a href=\"#publish\"/>publish</a></li>\n<li><a href=\"#publishAsOriginal\"/>publishAsOriginal</a></li>\n<li><a href=\"#removePackages\"/>removePackages</a></li>\n<li><a href=\"#setDetails\"/>setDetails</a></li>\n</ul>\n</div>\n<hr />\n\n<h3> <a name=\"addPackages\" href=\"#top\">Method: addPackages</a></h3>\nDescription:<br />\nAdd a set of packages to an erratum\n with the given advisory name. This method will only allow for modification\n of custom errata created either through the UI or API.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string advisoryName\n");
      out.write(" </li>\n<li>\n\narray:\n<ul>\n    <li>int - packageId</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nint - representing the number of packages added,\n exception otherwise \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"applicableToChannels\" href=\"#top\">Method: applicableToChannels</a></h3>\nDescription:<br />\nReturns a list of channels applicable to the erratum\n with the given advisory name.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string advisoryName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \t     struct - channel\n\t<ul>\n              \t<li> int \"channel_id\"</li>\n              \t<li> string \"label\"</li>\n              \t<li> string \"name\"</li>\n              \t<li> string \"parent_channel_label\"</li>\n          \t</ul>\n       </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"bugzillaFixes\" href=\"#top\">Method: bugzillaFixes</a></h3>\nDescription:<br />\nGet the Bugzilla fixes for an erratum matching the given\n advisoryName. The bugs will be returned in a struct where the bug id is\n");
      out.write(" the key.  i.e. 208144=\"errata.bugzillaFixes Method Returns different\n results than docs say\"\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string advisoryName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\t     struct - Bugzilla info\n\t<ul>\n              <li> string \"bugzilla_id\" - actual bug number is the key into the\n                      struct </li>\n              <li> string \"bug_summary\" - summary who's key is the bug id </li>\n      \t</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"clone\" href=\"#top\">Method: clone</a></h3>\nDescription:<br />\nClone a list of errata into the specified channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channel_label\n </li>\n<li>\n\narray:\n<ul>\n    <li>string -  advisory - The advisory name of the errata to clone.</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n              \n\n\t     struct - errata\n\t<ul>\n              <li> int \"id\" - Errata Id </li>\n              <li> string \"date\" - Date erratum was created. </li>\n");
      out.write("              <li> string \"advisory_type\" - Type of the advisory. </li>\n              <li> string \"advisory_name\" - Name of the advisory. </li>\n              <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n     \t</ul>\n \n          </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"cloneAsOriginal\" href=\"#top\">Method: cloneAsOriginal</a></h3>\nDescription:<br />\nClones a list of errata into a specified cloned channel\n according the original erratas.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channel_label\n </li>\n<li>\n\narray:\n<ul>\n    <li>string -  advisory - The advisory name of the errata to clone.</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n              \n\n\t     struct - errata\n\t<ul>\n              <li> int \"id\" - Errata Id </li>\n              <li> string \"date\" - Date erratum was created. </li>\n              <li> string \"advisory_type\" - Type of the advisory. </li>\n              <li> string \"advisory_name\" - Name of the advisory. </li>\n");
      out.write("              <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n     \t</ul>\n \n          </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"cloneAsOriginalAsync\" href=\"#top\">Method: cloneAsOriginalAsync</a></h3>\nDescription:<br />\nAsynchronously clones a list of errata into a specified cloned channel\n according the original erratas\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channel_label\n </li>\n<li>\n\narray:\n<ul>\n    <li>string -  advisory - The advisory name of the errata to clone.</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"cloneAsync\" href=\"#top\">Method: cloneAsync</a></h3>\nDescription:<br />\nAsynchronously clone a list of errata into the specified channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channel_label\n </li>\n<li>\n\narray:\n<ul>\n    <li>string -  advisory - The advisory name of the errata to clone.</li>\n");
      out.write("</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"create\" href=\"#top\">Method: create</a></h3>\nDescription:<br />\nCreate a custom errata.  If \"publish\" is set to true,\n      the errata will be published as well\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n\t     struct - errata info\n\t<ul>\n          \t<li> string \"synopsis\"</li>\n          \t<li> string \"advisory_name\"</li>\n          \t<li> int \"advisory_release\"</li>\n              <li> string \"advisory_type\" - Type of advisory (one of the\n                  following: 'Security Advisory', 'Product Enhancement Advisory',\n                  or 'Bug Fix Advisory' </li>\n          \t<li> string \"product\"</li>\n          \t<li> string \"errataFrom\"</li>\n          \t<li> string \"topic\"</li>\n          \t<li> string \"description\"</li>\n          \t<li> string \"references\"</li>\n          \t<li> string \"notes\"</li>\n          \t<li> string \"solution\"</li>\n              <li> string \"severity\" - Severity of advisory (one of the\n");
      out.write("                  following: 'Low', 'Moderate', 'Important', 'Critical'\n                  or 'Unspecified' </li>\n       \t</ul>\n </li>\n<li>\n\narray:\n  <ul>\n   <li>\n              \t     struct - bug\n\t<ul>\n                      <li> int \"id\" - Bug Id </li>\n                  \t<li> string \"summary\"</li>\n                  \t<li> string \"url\"</li>\n               \t</ul>\n       </li></ul>\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - keyword - List of keywords to associate\n              with the errata.</li>\n</ul>\n </li>\n<li>\n\narray:\n<ul>\n    <li>int - packageId</li>\n</ul>\n </li>\n<li>\n\n    boolean publish - Should the errata be published.\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - channelLabel - list of channels the errata should be\n                  published too, ignored if publish is set to false</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - errata\n\t<ul>\n              <li> int \"id\" - Errata Id </li>\n              <li> string \"date\" - Date erratum was created. </li>\n              <li> string \"advisory_type\" - Type of the advisory. </li>\n");
      out.write("              <li> string \"advisory_name\" - Name of the advisory. </li>\n              <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n     \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"delete\" href=\"#top\">Method: delete</a></h3>\nDescription:<br />\nDelete an erratum.  This method will only allow for deletion\n of custom errata created either through the UI or API.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string advisoryName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"findByCve\" href=\"#top\">Method: findByCve</a></h3>\nDescription:<br />\nLookup the details for errata associated with the given CVE\n (e.g. CVE-2008-3270)\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string cveName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n              \n\n\t     struct - errata\n\t<ul>\n              <li> int \"id\" - Errata Id </li>\n");
      out.write("              <li> string \"date\" - Date erratum was created. </li>\n              <li> string \"advisory_type\" - Type of the advisory. </li>\n              <li> string \"advisory_name\" - Name of the advisory. </li>\n              <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n     \t</ul>\n \n          </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getDetails\" href=\"#top\">Method: getDetails</a></h3>\nDescription:<br />\nRetrieves the details for the erratum matching the given\n advisory name.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string advisoryName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\t     struct - erratum\n\t<ul>\n          \t<li> int \"id\"</li>\n          \t<li> string \"issue_date\"</li>\n          \t<li> string \"update_date\"</li>\n              <li> string \"last_modified_date\" - This date is only included for\n          published erratum and it represents the last time the erratum was\n          modified. </li>\n          \t<li> string \"synopsis\"</li>\n");
      out.write("          \t<li> int \"release\"</li>\n          \t<li> string \"type\"</li>\n          \t<li> string \"product\"</li>\n          \t<li> string \"errataFrom\"</li>\n          \t<li> string \"topic\"</li>\n          \t<li> string \"description\"</li>\n          \t<li> string \"references\"</li>\n          \t<li> string \"notes\"</li>\n          \t<li> string \"solution\"</li>\n     \t</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listAffectedSystems\" href=\"#top\">Method: listAffectedSystems</a></h3>\nDescription:<br />\nReturn the list of systems affected by the erratum with\n advisory name.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string advisoryName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - system\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"name\"</li>\n           <li> dateTime.iso8601 \"last_checkin\" - Last time server\n              successfully checked in </li>\n           <li> dateTime.iso8601 \"last_boot\" - Last server boot time </li>\n           <li> dateTime.iso8601 \"created\" - Server registration time </li>\n");
      out.write("\n \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3 class=\"deprecated\"><a name=\"listByDate\" href=\"#top\">Method: listByDate</a></h3>\nDescription:<br />\nList errata that have been applied to a particular channel by date.\n<p />\n\n\nDeprecated - being replaced by channel.software.listErrata(User LoggedInUser,\n string channelLabel) <p />\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n              \n\n\t     struct - errata\n\t<ul>\n              <li> int \"id\" - Errata Id </li>\n              <li> string \"date\" - Date erratum was created. </li>\n              <li> string \"advisory_type\" - Type of the advisory. </li>\n              <li> string \"advisory_name\" - Name of the advisory. </li>\n              <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n     \t</ul>\n \n          </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listCves\" href=\"#top\">Method: listCves</a></h3>\nDescription:<br />\n");
      out.write("Returns a list of\n <a href=\"http://cve.mitre.org/\" target=\"_blank\">CVE</a>s\n applicable to the erratum with the given advisory name. CVEs may be associated\n only with published errata.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string advisoryName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n<ul>\n    <li>string - cveName</li>\n</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listKeywords\" href=\"#top\">Method: listKeywords</a></h3>\nDescription:<br />\nGet the keywords associated with an erratum matching the\n given advisory name.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string advisoryName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n<ul>\n    <li>string - Keyword associated with erratum.</li>\n</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listPackages\" href=\"#top\">Method: listPackages</a></h3>\nDescription:<br />\nReturns a list of the packages affected by the erratum\n with the given advisory name.\n<p />\n\n\n\n\nParameters:<br />\n");
      out.write("<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string advisoryName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n              \t     struct - package\n\t<ul>\n                  \t<li> int \"id\"</li>\n                  \t<li> string \"name\"</li>\n                  \t<li> string \"epoch\"</li>\n                  \t<li> string \"version\"</li>\n                  \t<li> string \"release\"</li>\n                  \t<li> string \"arch_label\"</li>\n                      <li>array \"providing_channels\"\n        <ul>\n            <li>string - Channel label\n                              providing this package.</li>\n        </ul>\n    </li>\n                  \t<li> string \"build_host\"</li>\n                  \t<li> string \"description\"</li>\n                  \t<li> string \"checksum\"</li>\n                  \t<li> string \"checksum_type\"</li>\n                  \t<li> string \"vendor\"</li>\n                  \t<li> string \"summary\"</li>\n                  \t<li> string \"cookie\"</li>\n                  \t<li> string \"license\"</li>\n                  \t<li> string \"path\"</li>\n");
      out.write("                  \t<li> string \"file\"</li>\n                  \t<li> string \"build_date\"</li>\n                  \t<li> string \"last_modified_date\"</li>\n                  \t<li> string \"size\"</li>\n                  \t<li> string \"payload_size\"</li>\n               \t</ul>\n           </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listUnpublishedErrata\" href=\"#top\">Method: listUnpublishedErrata</a></h3>\nDescription:<br />\nReturns a list of unpublished errata\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \t     struct - erratum\n\t<ul>\n              \t<li> int \"id\"</li>\n              \t<li> int \"published\"</li>\n              \t<li> string \"advisory\"</li>\n              \t<li> string \"advisory_name\"</li>\n              \t<li> string \"advisory_type\"</li>\n              \t<li> string \"synopsis\"</li>\n              \t<li> dateTime.iso8601 \"created\"</li>\n              \t<li> dateTime.iso8601 \"update_date\"</li>\n          \t</ul>\n      </li></ul>\n");
      out.write(" \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"publish\" href=\"#top\">Method: publish</a></h3>\nDescription:<br />\nPublish an existing (unpublished) errata to a set of channels.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string advisoryName\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - channelLabel - list of channel labels to publish to</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - errata\n\t<ul>\n              <li> int \"id\" - Errata Id </li>\n              <li> string \"date\" - Date erratum was created. </li>\n              <li> string \"advisory_type\" - Type of the advisory. </li>\n              <li> string \"advisory_name\" - Name of the advisory. </li>\n              <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n     \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"publishAsOriginal\" href=\"#top\">Method: publishAsOriginal</a></h3>\nDescription:<br />\nPublishes an existing (unpublished) cloned errata to a set of cloned\n channels according to its original erratum\n");
      out.write("<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string advisoryName\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - channelLabel - list of channel labels to publish to</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - errata\n\t<ul>\n              <li> int \"id\" - Errata Id </li>\n              <li> string \"date\" - Date erratum was created. </li>\n              <li> string \"advisory_type\" - Type of the advisory. </li>\n              <li> string \"advisory_name\" - Name of the advisory. </li>\n              <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n     \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removePackages\" href=\"#top\">Method: removePackages</a></h3>\nDescription:<br />\nRemove a set of packages from an erratum\n with the given advisory name.  This method will only allow for modification\n of custom errata created either through the UI or API.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string advisoryName\n");
      out.write(" </li>\n<li>\n\narray:\n<ul>\n    <li>int - packageId</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nint - representing the number of packages removed,\n exception otherwise \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setDetails\" href=\"#top\">Method: setDetails</a></h3>\nDescription:<br />\nSet erratum details. All arguments are optional and will only be modified\n if included in the struct. This method will only allow for modification of custom\n errata created either through the UI or API.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string advisoryName\n </li>\n<li>\n\n\t     struct - errata details\n\t<ul>\n          \t<li> string \"synopsis\"</li>\n          \t<li> string \"advisory_name\"</li>\n          \t<li> int \"advisory_release\"</li>\n              <li> string \"advisory_type\" - Type of advisory (one of the\n                  following: 'Security Advisory', 'Product Enhancement Advisory',\n                  or 'Bug Fix Advisory' </li>\n          \t<li> string \"product\"</li>\n          \t<li> dateTime.iso8601 \"issue_date\"</li>\n");
      out.write("          \t<li> dateTime.iso8601 \"update_date\"</li>\n          \t<li> string \"errataFrom\"</li>\n          \t<li> string \"topic\"</li>\n          \t<li> string \"description\"</li>\n          \t<li> string \"references\"</li>\n          \t<li> string \"notes\"</li>\n          \t<li> string \"solution\"</li>\n              <li> string \"severity\" - Severity of advisory (one of the\n                  following: 'Low', 'Moderate', 'Important', 'Critical'\n                  or 'Unspecified' </li>\n              <li> array \"bugs\" - 'bugs' is the key into the struct </li>\n              array:\n  <ul>\n   <li>\n                 \t     struct - bug\n\t<ul>\n                        <li> int \"id\" - Bug Id </li>\n                    \t<li> string \"summary\"</li>\n                    \t<li> string \"url\"</li>\n                 \t</ul>\n              </li></ul>\n              <li> array \"keywords\" - 'keywords' is the key into the struct </li>\n              array:\n<ul>\n    <li>string - keyword - List of keywords to associate\n                  with the errata.</li>\n</ul>\n");
      out.write("              <li> array \"CVEs\" - 'cves' is the key into the struct </li>\n              array:\n<ul>\n    <li>string - cves - List of CVEs to associate\n                  with the errata. (valid only for published errata)</li>\n</ul>\n     \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
