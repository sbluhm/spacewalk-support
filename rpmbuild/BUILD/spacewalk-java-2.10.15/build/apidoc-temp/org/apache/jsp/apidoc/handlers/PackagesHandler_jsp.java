/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2020-03-09 19:26:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apidoc.handlers;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class PackagesHandler_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n<head>\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n\n<style type=\"text/css\">\nul.apidoc {\n   list-style-image: url('/img/parent_node.gif');\n}\n\n.deprecated {\n   text-decoration: line-through;\n}\n</style>\n</head>\n<body>\n<div class=\"spacewalk-toolbar-h1\">\n<h1><i class=\"fa fa-gears\"></i>API Overview</h1>\n</div>\n\n<h2>Description</h2>\n<p><strong>Namespace</strong>:\npackages\n</p>\n<p>Methods to retrieve information about the Packages contained\n within this server.</p>\n<span class=\"small-text\">( <a href=\"/rhn/apidoc/index.jsp\">Return to API Overview</a> )</span>\n<hr />\n\n<div class=\"rounded-box\">\n<h2><a name=\"top\">Available methods</a></h2>\n<ul class=\"apidoc\">\n\n<li><a href=\"#findByNvrea\"/>findByNvrea</a></li>\n<li><a href=\"#getDetails\"/>getDetails</a></li>\n<li><a href=\"#getPackage\"/>getPackage</a></li>\n<li><a href=\"#getPackageUrl\"/>getPackageUrl</a></li>\n<li><a href=\"#listChangelog\"/>listChangelog</a></li>\n<li><a href=\"#listDependencies\"/>listDependencies</a></li>\n<li><a href=\"#listFiles\"/>listFiles</a></li>\n");
      out.write("<li><a href=\"#listProvidingChannels\"/>listProvidingChannels</a></li>\n<li><a href=\"#listProvidingErrata\"/>listProvidingErrata</a></li>\n<li><a href=\"#listSourcePackages\"/>listSourcePackages</a></li>\n<li><a href=\"#removePackage\"/>removePackage</a></li>\n<li><a href=\"#removeSourcePackage\"/>removeSourcePackage</a></li>\n</ul>\n</div>\n<hr />\n\n<h3> <a name=\"findByNvrea\" href=\"#top\">Method: findByNvrea</a></h3>\nDescription:<br />\nLookup the details for packages with the given name, version,\n          release, architecture label, and (optionally) epoch.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string name\n </li>\n<li>\n\n    string version\n </li>\n<li>\n\n    string release\n </li>\n<li>\n\n    string epoch - If set to something other than empty string,\n          strict matching will be used and the epoch string must be correct.\n          If set to an empty string, if the epoch is null or there is only one\n          NVRA combination, it will be returned.  (Empty string is recommended.)\n </li>\n");
      out.write("<li>\n\n    string archLabel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n     \n\n\t     struct - package\n\t<ul>\n      \t<li> string \"name\"</li>\n      \t<li> string \"version\"</li>\n      \t<li> string \"release\"</li>\n      \t<li> string \"epoch\"</li>\n      \t<li> int \"id\"</li>\n      \t<li> string \"arch_label\"</li>\n          <li> string \"path\" - The path on that file system that the package\n             resides </li>\n          <li> string \"provider\" - The provider of the package, determined by\n              the gpg key it was signed with. </li>\n      \t<li> dateTime.iso8601 \"last_modified\"</li>\n  \t</ul>\n \n   </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getDetails\" href=\"#top\">Method: getDetails</a></h3>\nDescription:<br />\nRetrieve details for the package with the ID.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int packageId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\t     struct - package\n\t<ul>\n       \t<li> int \"id\"</li>\n       \t<li> string \"name\"</li>\n");
      out.write("       \t<li> string \"epoch\"</li>\n       \t<li> string \"version\"</li>\n       \t<li> string \"release\"</li>\n       \t<li> string \"arch_label\"</li>\n           <li>array \"providing_channels\"\n        <ul>\n            <li>string Channel label providing this package.</li>\n        </ul>\n    </li>\n       \t<li> string \"build_host\"</li>\n       \t<li> string \"description\"</li>\n       \t<li> string \"checksum\"</li>\n       \t<li> string \"checksum_type\"</li>\n       \t<li> string \"vendor\"</li>\n       \t<li> string \"summary\"</li>\n       \t<li> string \"cookie\"</li>\n       \t<li> string \"license\"</li>\n       \t<li> string \"file\"</li>\n       \t<li> string \"build_date\"</li>\n       \t<li> string \"last_modified_date\"</li>\n       \t<li> string \"size\"</li>\n           <li> string \"path\" - The path on the Satellite's file system that\n              the package resides. </li>\n       \t<li> string \"payload_size\"</li>\n    \t</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getPackage\" href=\"#top\">Method: getPackage</a></h3>\nDescription:<br />\nRetrieve the package file associated with a package.\n");
      out.write(" (Consider using <a href =\"#getPackageUrl\">packages.getPackageUrl</a>\n for larger files.)\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int package_id\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nbinary object - package file \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getPackageUrl\" href=\"#top\">Method: getPackageUrl</a></h3>\nDescription:<br />\nRetrieve the url that can be used to download a package.\n      This will expire after a certain time period.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int package_id\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nstring - the download url \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listChangelog\" href=\"#top\">Method: listChangelog</a></h3>\nDescription:<br />\nList the change log for a package.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int packageId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nstring \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listDependencies\" href=\"#top\">Method: listDependencies</a></h3>\n");
      out.write("Description:<br />\nList the dependencies for a package.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int packageId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n     \t     struct - dependency\n\t<ul>\n       \t<li> string \"dependency\"</li>\n           <li> string \"dependency_type\" - One of the following: </li>\n         \t<ul>\n           \t<li>requires</li>\n           \t<li>conflicts</li>\n           \t<li>obsoletes</li>\n           \t<li>provides</li>\n           \t<li>recommends</li>\n           \t<li>suggests</li>\n           \t<li>supplements</li>\n           \t<li>enhances</li>\n         \t</ul>\n       \t<li> string \"dependency_modifier\"</li>\n     \t</ul>\n   </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listFiles\" href=\"#top\">Method: listFiles</a></h3>\nDescription:<br />\nList the files associated with a package.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int packageId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n");
      out.write("   <li>\n     \t     struct - file info\n\t<ul>\n       \t<li> string \"path\"</li>\n       \t<li> string \"type\"</li>\n       \t<li> string \"last_modified_date\"</li>\n       \t<li> string \"checksum\"</li>\n       \t<li> string \"checksum_type\"</li>\n       \t<li> int \"size\"</li>\n       \t<li> string \"linkto\"</li>\n     \t</ul>\n   </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listProvidingChannels\" href=\"#top\">Method: listProvidingChannels</a></h3>\nDescription:<br />\nList the channels that provide the a package.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int packageId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n   \t     struct - channel\n\t<ul>\n     \t<li> string \"label\"</li>\n     \t<li> string \"parent_label\"</li>\n     \t<li> string \"name\"</li>\n   \t</ul>\n </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listProvidingErrata\" href=\"#top\">Method: listProvidingErrata</a></h3>\nDescription:<br />\nList the errata providing the a package.\n<p />\n\n\n\n\nParameters:<br />\n");
      out.write("<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int packageId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n   \t     struct - errata\n\t<ul>\n     \t<li> string \"advisory\"</li>\n     \t<li> string \"issue_date\"</li>\n     \t<li> string \"last_modified_date\"</li>\n     \t<li> string \"update_date\"</li>\n     \t<li> string \"synopsis\"</li>\n     \t<li> string \"type\"</li>\n   \t</ul>\n </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listSourcePackages\" href=\"#top\">Method: listSourcePackages</a></h3>\nDescription:<br />\nList all source packages in user's organization.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n   \t     struct - source_package\n\t<ul>\n     \t<li> int \"id\"</li>\n     \t<li> string \"name\"</li>\n   \t</ul>\n </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removePackage\" href=\"#top\">Method: removePackage</a></h3>\nDescription:<br />\nRemove a package from the satellite.\n<p />\n\n\n\n\nParameters:<br />\n");
      out.write("<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int packageId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removeSourcePackage\" href=\"#top\">Method: removeSourcePackage</a></h3>\nDescription:<br />\nRemove a source package.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int packageSourceId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
