/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2020-03-09 19:26:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apidoc.handlers;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ProfileHandler_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n<head>\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n\n<style type=\"text/css\">\nul.apidoc {\n   list-style-image: url('/img/parent_node.gif');\n}\n\n.deprecated {\n   text-decoration: line-through;\n}\n</style>\n</head>\n<body>\n<div class=\"spacewalk-toolbar-h1\">\n<h1><i class=\"fa fa-gears\"></i>API Overview</h1>\n</div>\n\n<h2>Description</h2>\n<p><strong>Namespace</strong>:\nkickstart.profile\n</p>\n<p>Provides methods to access and modify many aspects of\n a kickstart profile.</p>\n<span class=\"small-text\">( <a href=\"/rhn/apidoc/index.jsp\">Return to API Overview</a> )</span>\n<hr />\n\n<div class=\"rounded-box\">\n<h2><a name=\"top\">Available methods</a></h2>\n<ul class=\"apidoc\">\n\n<li><a href=\"#addIpRange\"/>addIpRange</a></li>\n<li><a href=\"#addScript\"/>addScript</a></li>\n<li><a href=\"#addScript\"/>addScript</a></li>\n<li><a href=\"#addScript\"/>addScript</a></li>\n<li><a href=\"#compareActivationKeys\"/>compareActivationKeys</a></li>\n<li><a href=\"#compareAdvancedOptions\"/>compareAdvancedOptions</a></li>\n<li><a href=\"#comparePackages\"/>comparePackages</a></li>\n");
      out.write("<li><a href=\"#downloadKickstart\"/>downloadKickstart</a></li>\n<li><a href=\"#downloadRenderedKickstart\"/>downloadRenderedKickstart</a></li>\n<li><a href=\"#getAdvancedOptions\"/>getAdvancedOptions</a></li>\n<li><a href=\"#getAvailableRepositories\"/>getAvailableRepositories</a></li>\n<li><a href=\"#getCfgPreservation\"/>getCfgPreservation</a></li>\n<li><a href=\"#getChildChannels\"/>getChildChannels</a></li>\n<li><a href=\"#getCustomOptions\"/>getCustomOptions</a></li>\n<li><a href=\"#getKickstartTree\"/>getKickstartTree</a></li>\n<li><a href=\"#getRepositories\"/>getRepositories</a></li>\n<li><a href=\"#getUpdateType\"/>getUpdateType</a></li>\n<li><a href=\"#getVariables\"/>getVariables</a></li>\n<li><a href=\"#getVirtualizationType\"/>getVirtualizationType</a></li>\n<li><a href=\"#listIpRanges\"/>listIpRanges</a></li>\n<li><a href=\"#listScripts\"/>listScripts</a></li>\n<li><a href=\"#orderScripts\"/>orderScripts</a></li>\n<li><a href=\"#removeIpRange\"/>removeIpRange</a></li>\n<li><a href=\"#removeScript\"/>removeScript</a></li>\n<li><a href=\"#setAdvancedOptions\"/>setAdvancedOptions</a></li>\n");
      out.write("<li><a href=\"#setCfgPreservation\"/>setCfgPreservation</a></li>\n<li><a href=\"#setChildChannels\"/>setChildChannels</a></li>\n<li><a href=\"#setCustomOptions\"/>setCustomOptions</a></li>\n<li><a href=\"#setKickstartTree\"/>setKickstartTree</a></li>\n<li><a href=\"#setLogging\"/>setLogging</a></li>\n<li><a href=\"#setRepositories\"/>setRepositories</a></li>\n<li><a href=\"#setUpdateType\"/>setUpdateType</a></li>\n<li><a href=\"#setVariables\"/>setVariables</a></li>\n<li><a href=\"#setVirtualizationType\"/>setVirtualizationType</a></li>\n</ul>\n</div>\n<hr />\n\n<h3> <a name=\"addIpRange\" href=\"#top\">Method: addIpRange</a></h3>\nDescription:<br />\nAdd an ip range to a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string label - The label of the\n kickstart\n </li>\n<li>\n\n    string min - The ip address making up the\n minimum of the range (i.e. 192.168.0.1)\n </li>\n<li>\n\n    string max - The ip address making up the\n maximum of the range (i.e. 192.168.0.254)\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n");
      out.write("\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"addScript\" href=\"#top\">Method: addScript</a></h3>\nDescription:<br />\nAdd a pre/post script to a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - The kickstart label to\n add the script to.\n </li>\n<li>\n\n    string name - The kickstart script name.\n </li>\n<li>\n\n    string contents - The full script to\n add.\n </li>\n<li>\n\n    string interpreter - The path to the\n interpreter to use (i.e. /bin/bash). An empty string will use the\n kickstart default interpreter.\n </li>\n<li>\n\n    string type - The type of script (either\n 'pre' or 'post').\n </li>\n<li>\n\n    boolean chroot - Whether to run the script\n in the chrooted install location (recommended) or not.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nint id - the id of the added script \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"addScript\" href=\"#top\">Method: addScript</a></h3>\nDescription:<br />\nAdd a pre/post script to a kickstart profile.\n");
      out.write("<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - The kickstart label to\n add the script to.\n </li>\n<li>\n\n    string name - The kickstart script name.\n </li>\n<li>\n\n    string contents - The full script to\n add.\n </li>\n<li>\n\n    string interpreter - The path to the\n interpreter to use (i.e. /bin/bash). An empty string will use the\n kickstart default interpreter.\n </li>\n<li>\n\n    string type - The type of script (either\n 'pre' or 'post').\n </li>\n<li>\n\n    boolean chroot - Whether to run the script\n in the chrooted install location (recommended) or not.\n </li>\n<li>\n\n    boolean template - Enable templating using cobbler.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nint id - the id of the added script \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"addScript\" href=\"#top\">Method: addScript</a></h3>\nDescription:<br />\nAdd a pre/post script to a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - The kickstart label to\n");
      out.write(" add the script to.\n </li>\n<li>\n\n    string name - The kickstart script name.\n </li>\n<li>\n\n    string contents - The full script to\n add.\n </li>\n<li>\n\n    string interpreter - The path to the\n interpreter to use (i.e. /bin/bash). An empty string will use the\n kickstart default interpreter.\n </li>\n<li>\n\n    string type - The type of script (either\n 'pre' or 'post').\n </li>\n<li>\n\n    boolean chroot - Whether to run the script\n in the chrooted install location (recommended) or not.\n </li>\n<li>\n\n    boolean template - Enable templating using cobbler.\n </li>\n<li>\n\n    boolean erroronfail - Whether to throw an\n error if the script fails or not\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nint id - the id of the added script \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"compareActivationKeys\" href=\"#top\">Method: compareActivationKeys</a></h3>\nDescription:<br />\nReturns a list for each kickstart profile; each list will contain\n             activation keys not present on the other profile.\n<p />\n\n\n\n\nParameters:<br />\n");
      out.write("<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string kickstartLabel1\n </li>\n<li>\n\n    string kickstartLabel2\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\t     struct - Comparison Info\n\t<ul>\n          <li> array \"kickstartLabel1\" - Actual label of the first kickstart\n                 profile is the key into the struct </li>\n          array:\n  <ul>\n   <li>\n              \n\n\t     struct - activation key\n\t<ul>\n     \t<li> string \"key\"</li>\n     \t<li> string \"description\"</li>\n     \t<li> int \"usage_limit\"</li>\n     \t<li> string \"base_channel_label\"</li>\n         <li>array \"child_channel_labels\"\n        <ul>\n            <li>string childChannelLabel</li>\n        </ul>\n    </li>\n         <li>array \"entitlements\"\n        <ul>\n            <li>string entitlementLabel</li>\n        </ul>\n    </li>\n         <li>array \"server_group_ids\"\n        <ul>\n            <li>string serverGroupId</li>\n        </ul>\n    </li>\n         <li>array \"package_names\"\n        <ul>\n            <li>string packageName - (deprecated by packages)</li>\n");
      out.write("        </ul>\n    </li>\n         <li>array \"packages\"\n        <ul>\n            <li>\n       \t     struct - package\n\t<ul>\n             <li> string \"name\" - packageName </li>\n             <li> string \"arch\" - archLabel - optional </li>\n       \t</ul>\n                </li>\n        </ul>\n    </li>\n     \t<li> boolean \"universal_default\"</li>\n     \t<li> boolean \"disabled\"</li>\n   \t</ul>\n \n          </li></ul>\n          <li> array \"kickstartLabel2\" - Actual label of the second kickstart\n                 profile is the key into the struct </li>\n          array:\n  <ul>\n   <li>\n              \n\n\t     struct - activation key\n\t<ul>\n     \t<li> string \"key\"</li>\n     \t<li> string \"description\"</li>\n     \t<li> int \"usage_limit\"</li>\n     \t<li> string \"base_channel_label\"</li>\n         <li>array \"child_channel_labels\"\n        <ul>\n            <li>string childChannelLabel</li>\n        </ul>\n    </li>\n         <li>array \"entitlements\"\n        <ul>\n            <li>string entitlementLabel</li>\n        </ul>\n    </li>\n         <li>array \"server_group_ids\"\n");
      out.write("        <ul>\n            <li>string serverGroupId</li>\n        </ul>\n    </li>\n         <li>array \"package_names\"\n        <ul>\n            <li>string packageName - (deprecated by packages)</li>\n        </ul>\n    </li>\n         <li>array \"packages\"\n        <ul>\n            <li>\n       \t     struct - package\n\t<ul>\n             <li> string \"name\" - packageName </li>\n             <li> string \"arch\" - archLabel - optional </li>\n       \t</ul>\n                </li>\n        </ul>\n    </li>\n     \t<li> boolean \"universal_default\"</li>\n     \t<li> boolean \"disabled\"</li>\n   \t</ul>\n \n          </li></ul>\n  \t</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"compareAdvancedOptions\" href=\"#top\">Method: compareAdvancedOptions</a></h3>\nDescription:<br />\nReturns a list for each kickstart profile; each list will contain the\n             properties that differ between the profiles and their values for that\n             specific profile .\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string kickstartLabel1\n");
      out.write(" </li>\n<li>\n\n    string kickstartLabel2\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\t     struct - Comparison Info\n\t<ul>\n          <li> array \"kickstartLabel1\" - Actual label of the first kickstart\n                 profile is the key into the struct </li>\n          array:\n  <ul>\n   <li>\n              \n\n\t     struct - value\n\t<ul>\n          \t<li> string \"name\"</li>\n          \t<li> string \"value\"</li>\n          \t<li> boolean \"enabled\"</li>\n      \t</ul>\n \n          </li></ul>\n          <li> array \"kickstartLabel2\" - Actual label of the second kickstart\n                 profile is the key into the struct </li>\n          array:\n  <ul>\n   <li>\n              \n\n\t     struct - value\n\t<ul>\n          \t<li> string \"name\"</li>\n          \t<li> string \"value\"</li>\n          \t<li> boolean \"enabled\"</li>\n      \t</ul>\n \n          </li></ul>\n  \t</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"comparePackages\" href=\"#top\">Method: comparePackages</a></h3>\nDescription:<br />\nReturns a list for each kickstart profile; each list will contain\n");
      out.write("             package names not present on the other profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string kickstartLabel1\n </li>\n<li>\n\n    string kickstartLabel2\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\t     struct - Comparison Info\n\t<ul>\n          <li> array \"kickstartLabel1\" - Actual label of the first kickstart\n                 profile is the key into the struct </li>\n          array:\n<ul>\n    <li>string - package name</li>\n</ul>\n          <li> array \"kickstartLabel2\" - Actual label of the second kickstart\n                 profile is the key into the struct </li>\n          array:\n<ul>\n    <li>string - package name</li>\n</ul>\n  \t</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"downloadKickstart\" href=\"#top\">Method: downloadKickstart</a></h3>\nDescription:<br />\nDownload the full contents of a kickstart file.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - The label of the\n kickstart to download.\n </li>\n<li>\n\n");
      out.write("    string host - The host to use when\n referring to the satellite itself (Usually this should be the FQDN of the\n satellite, but could be the ip address or shortname of it as well.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nstring - The contents of the kickstart file. Note: if\n an activation key is not associated with the kickstart file, registration\n will not occur in the satellite generated %post section. If one is\n associated, it will be used for registration. \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"downloadRenderedKickstart\" href=\"#top\">Method: downloadRenderedKickstart</a></h3>\nDescription:<br />\nDownloads the Cobbler-rendered Kickstart file.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - The label of the\n kickstart to download.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nstring - The contents of the kickstart file. \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getAdvancedOptions\" href=\"#top\">Method: getAdvancedOptions</a></h3>\nDescription:<br />\n");
      out.write("Get advanced options for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - Label of kickstart\n profile to be changed.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n \n\n\t     struct - option\n\t<ul>\n          \t<li> string \"name\"</li>\n          \t<li> string \"arguments\"</li>\n      \t</ul>\n \n </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getAvailableRepositories\" href=\"#top\">Method: getAvailableRepositories</a></h3>\nDescription:<br />\nLists available OS repositories to associate with the provided\n kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string ksLabel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n<ul>\n    <li>string - repositoryLabel</li>\n</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getCfgPreservation\" href=\"#top\">Method: getCfgPreservation</a></h3>\nDescription:<br />\nGet ks.cfg preservation option for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n");
      out.write("<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string kslabel - Label of kickstart\n profile to be changed.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nboolean - The value of the option. True means that\n     ks.cfg will be copied to /root, false means that it will not. \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getChildChannels\" href=\"#top\">Method: getChildChannels</a></h3>\nDescription:<br />\nGet the child channels for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string kslabel - Label of kickstart\n profile.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n<ul>\n    <li>string - channelLabel</li>\n</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getCustomOptions\" href=\"#top\">Method: getCustomOptions</a></h3>\nDescription:<br />\nGet custom options for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n \n");
      out.write("\n\t     struct - option\n\t<ul>\n          \t<li> int \"id\"</li>\n          \t<li> string \"arguments\"</li>\n      \t</ul>\n \n </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getKickstartTree\" href=\"#top\">Method: getKickstartTree</a></h3>\nDescription:<br />\nGet the kickstart tree for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string kslabel - Label of kickstart\n profile to be changed.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    string kstreeLabel - Label of the kickstart tree.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getRepositories\" href=\"#top\">Method: getRepositories</a></h3>\nDescription:<br />\nLists all OS repositories associated with provided kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string ksLabel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n<ul>\n    <li>string - repositoryLabel</li>\n</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getUpdateType\" href=\"#top\">Method: getUpdateType</a></h3>\n");
      out.write("Description:<br />\nGet the update type for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string kslabel - Label of kickstart\n profile.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    string update_type - Update type for this Kickstart Profile.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getVariables\" href=\"#top\">Method: getVariables</a></h3>\nDescription:<br />\nReturns a list of variables\n                      associated with the specified kickstart profile\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string ksLabel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\t     struct - kickstart variable\n\t<ul>\n         \t<li> string \"key\"</li>\n         \t<li> string or int \"value\"</li>\n     \t</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getVirtualizationType\" href=\"#top\">Method: getVirtualizationType</a></h3>\nDescription:<br />\nFor given kickstart profile label returns label of\n virtualization type it's using\n<p />\n\n\n\n\nParameters:<br />\n");
      out.write("<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string ksLabel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    string virtLabel - Label of virtualization type.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listIpRanges\" href=\"#top\">Method: listIpRanges</a></h3>\nDescription:<br />\nList all ip ranges for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string label - The label of the\n kickstart\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n \n\n\t     struct - Kickstart Ip Range\n\t<ul>\n         <li> string \"ksLabel\" - The kickstart label associated with the ip range </li>\n         <li> string \"max\" - The max ip of the range </li>\n         <li> string \"min\" - The min ip of the range </li>\n   \t</ul>\n  </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listScripts\" href=\"#top\">Method: listScripts</a></h3>\nDescription:<br />\nList the pre and post scripts for a kickstart profile\n in the order they will run during the kickstart.\n<p />\n");
      out.write("\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - The label of the\n kickstart\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n \n\n\t     struct - kickstart script\n\t<ul>\n          \t<li> int \"id\"</li>\n          \t<li> string \"name\"</li>\n          \t<li> string \"contents\"</li>\n              <li> string \"script_type\" - Which type of script ('pre' or 'post'). </li>\n              <li> string \"interpreter\" - The scripting language interpreter to use\n                      for this script.  An empty string indicates the default kickstart\n                      shell. </li>\n              <li> boolean \"chroot\" - True if the script will be executed within the\n                  chroot environment. </li>\n              <li> boolean \"erroronfail\" - True if the script will throw an error if\n                  it fails. </li>\n              <li> boolean \"template\" - True if templating using cobbler is enabled </li>\n              <li> boolean \"beforeRegistration\" - True if script will run before the\n");
      out.write("                  server registers and performs server actions. </li>\n     \t</ul>\n  </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"orderScripts\" href=\"#top\">Method: orderScripts</a></h3>\nDescription:<br />\nChange the order that kickstart scripts will run for\n this kickstart profile. Scripts will run in the order they appear\n in the array. There are three arrays, one for all pre scripts, one\n for the post scripts that run before registration and server\n actions happen, and one for post scripts that run after registration\n and server actions. All scripts must be included in one of these\n lists, as appropriate.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - The label of the\n kickstart\n </li>\n<li>\n\narray:\n<ul>\n    <li>int - IDs of the ordered pre scripts</li>\n</ul>\n </li>\n<li>\n\narray:\n<ul>\n    <li>int - IDs of the ordered post scripts that will run\n              before registration</li>\n</ul>\n </li>\n<li>\n\narray:\n<ul>\n    <li>int - IDs of the ordered post scripts that will run\n");
      out.write("              after registration</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removeIpRange\" href=\"#top\">Method: removeIpRange</a></h3>\nDescription:<br />\nRemove an ip range from a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - The kickstart label of\n the ip range you want to remove\n </li>\n<li>\n\n    string ip_address - An Ip Address that\n falls within the range that you are wanting to remove. The min or max of\n the range will work.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nint - 1 on successful removal, 0 if range wasn't found\n for the specified kickstart, exception otherwise. \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removeScript\" href=\"#top\">Method: removeScript</a></h3>\nDescription:<br />\nRemove a script from a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel - The kickstart from which\n");
      out.write(" to remove the script from.\n </li>\n<li>\n\n    int scriptId - The id of the script to\n remove.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setAdvancedOptions\" href=\"#top\">Method: setAdvancedOptions</a></h3>\nDescription:<br />\nSet advanced options for a kickstart profile.\n If 'md5_crypt_rootpw' is set to 'True', 'root_pw' is taken as plaintext and\n will md5 encrypted on server side, otherwise a hash encoded password\n (according to the auth option) is expected\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel\n </li>\n<li>\n\narray:\n  <ul>\n   <li>\n      \t     struct - advanced options\n\t<ul>\n              <li> string \"name\" - Name of the advanced option.\n              Valid Option names: autostep, interactive, install, upgrade, text,\n              network, cdrom, harddrive, nfs, url, lang, langsupport keyboard,\n              mouse, device, deviceprobe, zerombr, clearpart, bootloader,\n");
      out.write("              timezone, auth, rootpw, selinux, reboot, firewall, xconfig, skipx,\n              key, ignoredisk, autopart, cmdline, firstboot, graphical, iscsi,\n              iscsiname, logging, monitor, multipath, poweroff, halt, services,\n              shutdown, user, vnc, zfcp, driverdisk, md5_crypt_rootpw </li>\n              <li> string \"arguments\" - Arguments of the option </li>\n      \t</ul>\n   </li></ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setCfgPreservation\" href=\"#top\">Method: setCfgPreservation</a></h3>\nDescription:<br />\nSet ks.cfg preservation option for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string kslabel - Label of kickstart\n profile to be changed.\n </li>\n<li>\n\n    boolean preserve - whether or not\n      ks.cfg and all %include fragments will be copied to /root.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n");
      out.write(" \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setChildChannels\" href=\"#top\">Method: setChildChannels</a></h3>\nDescription:<br />\nSet the child channels for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string kslabel - Label of kickstart\n profile to be changed.\n </li>\n<li>\n\n    string[] channelLabels - List of labels of child channels\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setCustomOptions\" href=\"#top\">Method: setCustomOptions</a></h3>\nDescription:<br />\nSet custom options for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string ksLabel\n </li>\n<li>\n\n    string[] options\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setKickstartTree\" href=\"#top\">Method: setKickstartTree</a></h3>\nDescription:<br />\n");
      out.write("Set the kickstart tree for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string kslabel - Label of kickstart\n profile to be changed.\n </li>\n<li>\n\n    string kstreeLabel - Label of new\n kickstart tree.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setLogging\" href=\"#top\">Method: setLogging</a></h3>\nDescription:<br />\nSet logging options for a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string kslabel - Label of kickstart\n profile to be changed.\n </li>\n<li>\n\n    boolean pre - whether or not to log\n      the pre section of a kickstart to /root/ks-pre.log\n </li>\n<li>\n\n    boolean post - whether or not to log\n      the post section of a kickstart to /root/ks-post.log\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setRepositories\" href=\"#top\">Method: setRepositories</a></h3>\n");
      out.write("Description:<br />\nAssociates OS repository to a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string ksLabel\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - repositoryLabel</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setUpdateType\" href=\"#top\">Method: setUpdateType</a></h3>\nDescription:<br />\nSet the update typefor a kickstart profile.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string kslabel - Label of kickstart\n profile to be changed.\n </li>\n<li>\n\n    string updateType - The new update type\n to set. Possible values are 'red_hat', 'all', and 'none'.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setVariables\" href=\"#top\">Method: setVariables</a></h3>\nDescription:<br />\nAssociates list of kickstart variables\n                              with the specified kickstart profile\n");
      out.write("<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string ksLabel\n </li>\n<li>\n\n\t     struct - kickstart variable\n\t<ul>\n         \t<li> string \"key\"</li>\n         \t<li> string or int \"value\"</li>\n     \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setVirtualizationType\" href=\"#top\">Method: setVirtualizationType</a></h3>\nDescription:<br />\nFor given kickstart profile label sets its virtualization type.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string ksLabel\n </li>\n<li>\n\n    string typeLabel - One of the following: 'none',\n 'qemu', 'para_host', 'xenpv', 'xenfv'\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
