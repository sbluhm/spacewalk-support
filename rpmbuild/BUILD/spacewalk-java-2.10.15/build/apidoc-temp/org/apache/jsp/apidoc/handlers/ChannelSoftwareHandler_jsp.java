/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2020-03-09 19:26:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apidoc.handlers;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ChannelSoftwareHandler_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n<head>\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n\n<style type=\"text/css\">\nul.apidoc {\n   list-style-image: url('/img/parent_node.gif');\n}\n\n.deprecated {\n   text-decoration: line-through;\n}\n</style>\n</head>\n<body>\n<div class=\"spacewalk-toolbar-h1\">\n<h1><i class=\"fa fa-gears\"></i>API Overview</h1>\n</div>\n\n<h2>Description</h2>\n<p><strong>Namespace</strong>:\nchannel.software\n</p>\n<p>Provides methods to access and modify many aspects of a channel.</p>\n<span class=\"small-text\">( <a href=\"/rhn/apidoc/index.jsp\">Return to API Overview</a> )</span>\n<hr />\n\n<div class=\"rounded-box\">\n<h2><a name=\"top\">Available methods</a></h2>\n<ul class=\"apidoc\">\n\n<li><a href=\"#addPackages\"/>addPackages</a></li>\n<li><a href=\"#addRepoFilter\"/>addRepoFilter</a></li>\n<li><a href=\"#associateRepo\"/>associateRepo</a></li>\n<li><a href=\"#clearRepoFilters\"/>clearRepoFilters</a></li>\n<li><a href=\"#clone\"/>clone</a></li>\n<li><a href=\"#create\"/>create</a></li>\n<li><a href=\"#create\"/>create</a></li>\n<li><a href=\"#create\"/>create</a></li>\n");
      out.write("<li><a href=\"#createRepo\"/>createRepo</a></li>\n<li><a href=\"#createRepo\"/>createRepo</a></li>\n<li><a href=\"#delete\"/>delete</a></li>\n<li><a href=\"#disassociateRepo\"/>disassociateRepo</a></li>\n<li><a href=\"#getChannelLastBuildById\"/>getChannelLastBuildById</a></li>\n<li><a href=\"#getDetails\"/>getDetails</a></li>\n<li><a href=\"#getDetails\"/>getDetails</a></li>\n<li><a href=\"#getRepoDetails\"/>getRepoDetails</a></li>\n<li><a href=\"#getRepoDetails\"/>getRepoDetails</a></li>\n<li><a href=\"#getRepoSyncCronExpression\"/>getRepoSyncCronExpression</a></li>\n<li><a href=\"#isGloballySubscribable\"/>isGloballySubscribable</a></li>\n<li><a href=\"#isUserManageable\"/>isUserManageable</a></li>\n<li><a href=\"#isUserSubscribable\"/>isUserSubscribable</a></li>\n<li><a href=\"#listAllPackages\"/>listAllPackages</a></li>\n<li><a href=\"#listAllPackages\"/>listAllPackages</a></li>\n<li><a href=\"#listAllPackages\"/>listAllPackages</a></li>\n<li><a href=\"#listAllPackages\"/>listAllPackages</a></li>\n<li><a href=\"#listAllPackages\"/>listAllPackages</a></li>\n<li><a href=\"#listAllPackagesByDate\"/>listAllPackagesByDate</a></li>\n");
      out.write("<li><a href=\"#listAllPackagesByDate\"/>listAllPackagesByDate</a></li>\n<li><a href=\"#listAllPackagesByDate\"/>listAllPackagesByDate</a></li>\n<li><a href=\"#listArches\"/>listArches</a></li>\n<li><a href=\"#listChannelRepos\"/>listChannelRepos</a></li>\n<li><a href=\"#listChildren\"/>listChildren</a></li>\n<li><a href=\"#listErrata\"/>listErrata</a></li>\n<li><a href=\"#listErrata\"/>listErrata</a></li>\n<li><a href=\"#listErrata\"/>listErrata</a></li>\n<li><a href=\"#listErrata\"/>listErrata</a></li>\n<li><a href=\"#listErrata\"/>listErrata</a></li>\n<li><a href=\"#listErrata\"/>listErrata</a></li>\n<li><a href=\"#listErrataByType\"/>listErrataByType</a></li>\n<li><a href=\"#listErrataNeedingSync\"/>listErrataNeedingSync</a></li>\n<li><a href=\"#listLatestPackages\"/>listLatestPackages</a></li>\n<li><a href=\"#listPackagesWithoutChannel\"/>listPackagesWithoutChannel</a></li>\n<li><a href=\"#listRepoFilters\"/>listRepoFilters</a></li>\n<li><a href=\"#listSubscribedSystems\"/>listSubscribedSystems</a></li>\n<li><a href=\"#listSystemChannels\"/>listSystemChannels</a></li>\n");
      out.write("<li><a href=\"#listUserRepos\"/>listUserRepos</a></li>\n<li><a href=\"#mergeErrata\"/>mergeErrata</a></li>\n<li><a href=\"#mergeErrata\"/>mergeErrata</a></li>\n<li><a href=\"#mergeErrata\"/>mergeErrata</a></li>\n<li><a href=\"#mergePackages\"/>mergePackages</a></li>\n<li><a href=\"#regenerateNeededCache\"/>regenerateNeededCache</a></li>\n<li><a href=\"#regenerateNeededCache\"/>regenerateNeededCache</a></li>\n<li><a href=\"#regenerateYumCache\"/>regenerateYumCache</a></li>\n<li><a href=\"#removeErrata\"/>removeErrata</a></li>\n<li><a href=\"#removePackages\"/>removePackages</a></li>\n<li><a href=\"#removeRepo\"/>removeRepo</a></li>\n<li><a href=\"#removeRepo\"/>removeRepo</a></li>\n<li><a href=\"#removeRepoFilter\"/>removeRepoFilter</a></li>\n<li><a href=\"#setContactDetails\"/>setContactDetails</a></li>\n<li><a href=\"#setDetails\"/>setDetails</a></li>\n<li><a href=\"#setDetails\"/>setDetails</a></li>\n<li><a href=\"#setGloballySubscribable\"/>setGloballySubscribable</a></li>\n<li><a href=\"#setRepoFilters\"/>setRepoFilters</a></li>\n<li><a href=\"#setSystemChannels\"/>setSystemChannels</a></li>\n");
      out.write("<li><a href=\"#setUserManageable\"/>setUserManageable</a></li>\n<li><a href=\"#setUserSubscribable\"/>setUserSubscribable</a></li>\n<li><a href=\"#subscribeSystem\"/>subscribeSystem</a></li>\n<li><a href=\"#syncErrata\"/>syncErrata</a></li>\n<li><a href=\"#syncRepo\"/>syncRepo</a></li>\n<li><a href=\"#syncRepo\"/>syncRepo</a></li>\n<li><a href=\"#syncRepo\"/>syncRepo</a></li>\n<li><a href=\"#syncRepo\"/>syncRepo</a></li>\n<li><a href=\"#updateRepo\"/>updateRepo</a></li>\n<li><a href=\"#updateRepoLabel\"/>updateRepoLabel</a></li>\n<li><a href=\"#updateRepoLabel\"/>updateRepoLabel</a></li>\n<li><a href=\"#updateRepoSsl\"/>updateRepoSsl</a></li>\n<li><a href=\"#updateRepoSsl\"/>updateRepoSsl</a></li>\n<li><a href=\"#updateRepoUrl\"/>updateRepoUrl</a></li>\n<li><a href=\"#updateRepoUrl\"/>updateRepoUrl</a></li>\n</ul>\n</div>\n<hr />\n\n<h3> <a name=\"addPackages\" href=\"#top\">Method: addPackages</a></h3>\nDescription:<br />\nAdds a given list of packages to the given channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - target channel.\n");
      out.write(" </li>\n<li>\n\narray:\n<ul>\n    <li>int - packageId -  id of a package to\n                                   add to the channel.</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"addRepoFilter\" href=\"#top\">Method: addRepoFilter</a></h3>\nDescription:<br />\nAdds a filter for a given repo.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey \n </li>\n<li>\n\n    string label - repository label\n </li>\n<li>\n\n\t     struct - filter_map\n\t<ul>\n              <li> string \"filter\" - string to filter on </li>\n              <li> string \"flag\" - + for include, - for exclude </li>\n  \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nint sort order for new filter \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"associateRepo\" href=\"#top\">Method: associateRepo</a></h3>\nDescription:<br />\nAssociates a repository with a channel\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel label\n");
      out.write(" </li>\n<li>\n\n    string repoLabel - repository label\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"name\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"arch_name\"</li>\n      \t<li> string \"arch_label\"</li>\n      \t<li> string \"summary\"</li>\n      \t<li> string \"description\"</li>\n      \t<li> string \"checksum_label\"</li>\n      \t<li> dateTime.iso8601 \"last_modified\"</li>\n      \t<li> string \"maintainer_name\"</li>\n      \t<li> string \"maintainer_email\"</li>\n      \t<li> string \"maintainer_phone\"</li>\n      \t<li> string \"support_policy\"</li>\n      \t<li> string \"gpg_key_url\"</li>\n      \t<li> string \"gpg_key_id\"</li>\n      \t<li> string \"gpg_key_fp\"</li>\n          <li> dateTime.iso8601 \"yumrepo_last_sync\" - (optional) </li>\n      \t<li> string \"end_of_life\"</li>\n      \t<li> string \"parent_channel_label\"</li>\n      \t<li> string \"clone_original\"</li>\n      array:\n  <ul>\n   <li>\n          \t     struct - contentSources\n\t<ul>\n              \t<li> int \"id\"</li>\n");
      out.write("              \t<li> string \"label\"</li>\n              \t<li> string \"sourceUrl\"</li>\n              \t<li> string \"type\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"clearRepoFilters\" href=\"#top\">Method: clearRepoFilters</a></h3>\nDescription:<br />\nRemoves the filters for a repo\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string label - repository label\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"clone\" href=\"#top\">Method: clone</a></h3>\nDescription:<br />\nClone a channel.  If arch_label is omitted, the arch label of the\n      original channel will be used. If parent_label is omitted, the clone will be\n      a base channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string original_label\n </li>\n<li>\n\n\t     struct - channel details\n\t<ul>\n          \t<li> string \"name\"</li>\n          \t<li> string \"label\"</li>\n");
      out.write("          \t<li> string \"summary\"</li>\n              <li> string \"parent_label\" - (optional) </li>\n              <li> string \"arch_label\" - (optional) </li>\n              <li> string \"gpg_key_url\" - (optional),\n              gpg_url might be used as well </li>\n              <li> string \"gpg_key_id\" - (optional),\n              gpg_id might be used as well </li>\n              <li> string \"gpg_key_fp\" - (optional),\n              gpg_fingerprint might be used as well </li>\n              <li> string \"description\" - (optional) </li>\n              <li> string \"checksum\" - either sha1 or sha256 </li>\n      \t</ul>\n </li>\n<li>\n\n    boolean original_state\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nint the cloned channel ID \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"create\" href=\"#top\">Method: create</a></h3>\nDescription:<br />\nCreates a software channel\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string label - label of the new channel\n </li>\n<li>\n\n    string name - name of the new channel\n");
      out.write(" </li>\n<li>\n\n    string summary - summary of the channel\n </li>\n<li>\n\n    string archLabel - the label of the architecture the channel corresponds to,\n              see channel.software.listArches API for complete listing\n </li>\n<li>\n\n    string parentLabel - label of the parent of this\n              channel, an empty string if it does not have one\n </li>\n<li>\n\n    string checksumType - checksum type for this channel,\n              used for yum repository metadata generation\n      \t<ul>\n          \t<li>sha1 - Offers widest compatibility  with clients</li>\n          \t<li>sha256 - Offers highest security, but is compatible\n                        only with newer clients: Fedora 11 and newer,\n                        or Enterprise Linux 6 and newer.</li>\n      \t</ul>\n </li>\n<li>\n\n\t     struct - gpgKey\n\t<ul>\n              <li> string \"url\" - GPG key URL </li>\n              <li> string \"id\" - GPG key ID </li>\n              <li> string \"fingerprint\" - GPG key Fingerprint </li>\n      \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n");
      out.write("<code><ul><li>\n\n\nint - 1 if the creation operation succeeded, 0 otherwise \n \n</li></ul>\n</code>\n<p />\nAvailable since: 10.9 <p />\n<hr />\n\n<h3> <a name=\"create\" href=\"#top\">Method: create</a></h3>\nDescription:<br />\nCreates a software channel\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string label - label of the new channel\n </li>\n<li>\n\n    string name - name of the new channel\n </li>\n<li>\n\n    string summary - summary of the channel\n </li>\n<li>\n\n    string archLabel - the label of the architecture the channel corresponds to,\n              see channel.software.listArches API for complete listing\n </li>\n<li>\n\n    string parentLabel - label of the parent of this\n              channel, an empty string if it does not have one\n </li>\n<li>\n\n    string checksumType - checksum type for this channel,\n              used for yum repository metadata generation\n      \t<ul>\n          \t<li>sha1 - Offers widest compatibility  with clients</li>\n          \t<li>sha256 - Offers highest security, but is compatible\n");
      out.write("                        only with newer clients: Fedora 11 and newer,\n                        or Enterprise Linux 6 and newer.</li>\n      \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nint - 1 if the creation operation succeeded, 0 otherwise \n \n</li></ul>\n</code>\n<p />\nAvailable since: 10.9 <p />\n<hr />\n\n<h3> <a name=\"create\" href=\"#top\">Method: create</a></h3>\nDescription:<br />\nCreates a software channel\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string label - label of the new channel\n </li>\n<li>\n\n    string name - name of the new channel\n </li>\n<li>\n\n    string summary - summary of the channel\n </li>\n<li>\n\n    string archLabel - the label of the architecture the channel corresponds to,\n              see channel.software.listArches API for complete listing\n </li>\n<li>\n\n    string parentLabel - label of the parent of this\n              channel, an empty string if it does not have one\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nint - 1 if the creation operation succeeded, 0 otherwise \n");
      out.write(" \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"createRepo\" href=\"#top\">Method: createRepo</a></h3>\nDescription:<br />\nCreates a repository\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string label - repository label\n </li>\n<li>\n\n    string type - repository type (yum, uln...)\n </li>\n<li>\n\n    string url - repository url\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"sourceUrl\"</li>\n      \t<li> string \"type\"</li>\n                              \t<li> string \"sslCaDesc\"</li>\n              \t<li> string \"sslCertDesc\"</li>\n              \t<li> string \"sslKeyDesc\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"createRepo\" href=\"#top\">Method: createRepo</a></h3>\nDescription:<br />\nCreates a repository\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string label - repository label\n </li>\n<li>\n");
      out.write("\n    string type - repository type (yum, uln...)\n </li>\n<li>\n\n    string url - repository url\n </li>\n<li>\n\n    string sslCaCert - SSL CA cert description\n </li>\n<li>\n\n    string sslCliCert - SSL Client cert description\n </li>\n<li>\n\n    string sslCliKey - SSL Client key description\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"sourceUrl\"</li>\n      \t<li> string \"type\"</li>\n                              \t<li> string \"sslCaDesc\"</li>\n              \t<li> string \"sslCertDesc\"</li>\n              \t<li> string \"sslKeyDesc\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"delete\" href=\"#top\">Method: delete</a></h3>\nDescription:<br />\nDeletes a custom software channel\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to delete\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n");
      out.write(" \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"disassociateRepo\" href=\"#top\">Method: disassociateRepo</a></h3>\nDescription:<br />\nDisassociates a repository from a channel\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel label\n </li>\n<li>\n\n    string repoLabel - repository label\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"name\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"arch_name\"</li>\n      \t<li> string \"arch_label\"</li>\n      \t<li> string \"summary\"</li>\n      \t<li> string \"description\"</li>\n      \t<li> string \"checksum_label\"</li>\n      \t<li> dateTime.iso8601 \"last_modified\"</li>\n      \t<li> string \"maintainer_name\"</li>\n      \t<li> string \"maintainer_email\"</li>\n      \t<li> string \"maintainer_phone\"</li>\n      \t<li> string \"support_policy\"</li>\n      \t<li> string \"gpg_key_url\"</li>\n      \t<li> string \"gpg_key_id\"</li>\n      \t<li> string \"gpg_key_fp\"</li>\n");
      out.write("          <li> dateTime.iso8601 \"yumrepo_last_sync\" - (optional) </li>\n      \t<li> string \"end_of_life\"</li>\n      \t<li> string \"parent_channel_label\"</li>\n      \t<li> string \"clone_original\"</li>\n      array:\n  <ul>\n   <li>\n          \t     struct - contentSources\n\t<ul>\n              \t<li> int \"id\"</li>\n              \t<li> string \"label\"</li>\n              \t<li> string \"sourceUrl\"</li>\n              \t<li> string \"type\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getChannelLastBuildById\" href=\"#top\">Method: getChannelLastBuildById</a></h3>\nDescription:<br />\nReturns the last build date of the repomd.xml file\n for the given channel as a localised string.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int id - id of channel wanted\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nthe last build date of the repomd.xml file\n as a localised string \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getDetails\" href=\"#top\">Method: getDetails</a></h3>\n");
      out.write("Description:<br />\nReturns details of the given channel as a map\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"name\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"arch_name\"</li>\n      \t<li> string \"arch_label\"</li>\n      \t<li> string \"summary\"</li>\n      \t<li> string \"description\"</li>\n      \t<li> string \"checksum_label\"</li>\n      \t<li> dateTime.iso8601 \"last_modified\"</li>\n      \t<li> string \"maintainer_name\"</li>\n      \t<li> string \"maintainer_email\"</li>\n      \t<li> string \"maintainer_phone\"</li>\n      \t<li> string \"support_policy\"</li>\n      \t<li> string \"gpg_key_url\"</li>\n      \t<li> string \"gpg_key_id\"</li>\n      \t<li> string \"gpg_key_fp\"</li>\n          <li> dateTime.iso8601 \"yumrepo_last_sync\" - (optional) </li>\n      \t<li> string \"end_of_life\"</li>\n      \t<li> string \"parent_channel_label\"</li>\n      \t<li> string \"clone_original\"</li>\n");
      out.write("      array:\n  <ul>\n   <li>\n          \t     struct - contentSources\n\t<ul>\n              \t<li> int \"id\"</li>\n              \t<li> string \"label\"</li>\n              \t<li> string \"sourceUrl\"</li>\n              \t<li> string \"type\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getDetails\" href=\"#top\">Method: getDetails</a></h3>\nDescription:<br />\nReturns details of the given channel as a map\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int id - channel to query\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"name\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"arch_name\"</li>\n      \t<li> string \"arch_label\"</li>\n      \t<li> string \"summary\"</li>\n      \t<li> string \"description\"</li>\n      \t<li> string \"checksum_label\"</li>\n      \t<li> dateTime.iso8601 \"last_modified\"</li>\n      \t<li> string \"maintainer_name\"</li>\n      \t<li> string \"maintainer_email\"</li>\n");
      out.write("      \t<li> string \"maintainer_phone\"</li>\n      \t<li> string \"support_policy\"</li>\n      \t<li> string \"gpg_key_url\"</li>\n      \t<li> string \"gpg_key_id\"</li>\n      \t<li> string \"gpg_key_fp\"</li>\n          <li> dateTime.iso8601 \"yumrepo_last_sync\" - (optional) </li>\n      \t<li> string \"end_of_life\"</li>\n      \t<li> string \"parent_channel_label\"</li>\n      \t<li> string \"clone_original\"</li>\n      array:\n  <ul>\n   <li>\n          \t     struct - contentSources\n\t<ul>\n              \t<li> int \"id\"</li>\n              \t<li> string \"label\"</li>\n              \t<li> string \"sourceUrl\"</li>\n              \t<li> string \"type\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getRepoDetails\" href=\"#top\">Method: getRepoDetails</a></h3>\nDescription:<br />\nReturns details of the given repository\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string repoLabel - repo to query\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n");
      out.write("      \t<li> int \"id\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"sourceUrl\"</li>\n      \t<li> string \"type\"</li>\n                              \t<li> string \"sslCaDesc\"</li>\n              \t<li> string \"sslCertDesc\"</li>\n              \t<li> string \"sslKeyDesc\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getRepoDetails\" href=\"#top\">Method: getRepoDetails</a></h3>\nDescription:<br />\nReturns details of the given repo\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string repoLabel - repo to query\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"sourceUrl\"</li>\n      \t<li> string \"type\"</li>\n                              \t<li> string \"sslCaDesc\"</li>\n              \t<li> string \"sslCertDesc\"</li>\n              \t<li> string \"sslKeyDesc\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n");
      out.write("\n<h3> <a name=\"getRepoSyncCronExpression\" href=\"#top\">Method: getRepoSyncCronExpression</a></h3>\nDescription:<br />\nReturns repo synchronization cron expression\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel label\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nstring quartz expression \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"isGloballySubscribable\" href=\"#top\">Method: isGloballySubscribable</a></h3>\nDescription:<br />\nReturns whether the channel is subscribable by any user\n in the organization\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nint - 1 if true, 0 otherwise \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"isUserManageable\" href=\"#top\">Method: isUserManageable</a></h3>\nDescription:<br />\nReturns whether the channel may be managed by the given user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n");
      out.write(" </li>\n<li>\n\n    string channelLabel - label of the channel\n </li>\n<li>\n\n    string login - login of the target user\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nint - 1 if manageable, 0 if not \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"isUserSubscribable\" href=\"#top\">Method: isUserSubscribable</a></h3>\nDescription:<br />\nReturns whether the channel may be subscribed to by the given user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - label of the channel\n </li>\n<li>\n\n    string login - login of the target user\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\nint - 1 if subscribable, 0 if not \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listAllPackages\" href=\"#top\">Method: listAllPackages</a></h3>\nDescription:<br />\nLists all packages in the channel, regardless of package version,\n between the given dates.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n<li>\n\n    dateTime.iso8601 startDate\n");
      out.write(" </li>\n<li>\n\n    dateTime.iso8601 endDate\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n              \n\n\t     struct - package\n\t<ul>\n      \t<li> string \"name\"</li>\n      \t<li> string \"version\"</li>\n      \t<li> string \"release\"</li>\n      \t<li> string \"epoch\"</li>\n      \t<li> string \"checksum\"</li>\n      \t<li> string \"checksum_type\"</li>\n      \t<li> int \"id\"</li>\n      \t<li> string \"arch_label\"</li>\n      \t<li> string \"last_modified_date\"</li>\n          <li> string \"last_modified\" - (Deprecated) </li>\n  \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listAllPackages\" href=\"#top\">Method: listAllPackages</a></h3>\nDescription:<br />\nLists all packages in the channel, regardless of version whose last\n modified date is greater than given date.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n<li>\n\n    dateTime.iso8601 startDate\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n");
      out.write("              \n\n\t     struct - package\n\t<ul>\n      \t<li> string \"name\"</li>\n      \t<li> string \"version\"</li>\n      \t<li> string \"release\"</li>\n      \t<li> string \"epoch\"</li>\n      \t<li> string \"checksum\"</li>\n      \t<li> string \"checksum_type\"</li>\n      \t<li> int \"id\"</li>\n      \t<li> string \"arch_label\"</li>\n      \t<li> string \"last_modified_date\"</li>\n          <li> string \"last_modified\" - (Deprecated) </li>\n  \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listAllPackages\" href=\"#top\">Method: listAllPackages</a></h3>\nDescription:<br />\nLists all packages in the channel, regardless of the package version\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n              \n\n\t     struct - package\n\t<ul>\n      \t<li> string \"name\"</li>\n      \t<li> string \"version\"</li>\n      \t<li> string \"release\"</li>\n      \t<li> string \"epoch\"</li>\n      \t<li> string \"checksum\"</li>\n");
      out.write("      \t<li> string \"checksum_type\"</li>\n      \t<li> int \"id\"</li>\n      \t<li> string \"arch_label\"</li>\n      \t<li> string \"last_modified_date\"</li>\n          <li> string \"last_modified\" - (Deprecated) </li>\n  \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3 class=\"deprecated\"><a name=\"listAllPackages\" href=\"#top\">Method: listAllPackages</a></h3>\nDescription:<br />\nLists all packages in the channel, regardless of package version,\n between the given dates.\n Example Date:  '2008-08-20 08:00:00'\n<p />\n\n\nDeprecated - being replaced by listAllPackages(string sessionKey,\n string channelLabel, dateTime.iso8601 startDate, dateTime.iso8601 endDate) <p />\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n<li>\n\n    string startDate\n </li>\n<li>\n\n    string endDate\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n              \n\n\t     struct - package\n\t<ul>\n      \t<li> string \"name\"</li>\n      \t<li> string \"version\"</li>\n");
      out.write("      \t<li> string \"release\"</li>\n      \t<li> string \"epoch\"</li>\n      \t<li> string \"checksum\"</li>\n      \t<li> string \"checksum_type\"</li>\n      \t<li> int \"id\"</li>\n      \t<li> string \"arch_label\"</li>\n      \t<li> string \"last_modified_date\"</li>\n          <li> string \"last_modified\" - (Deprecated) </li>\n  \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3 class=\"deprecated\"><a name=\"listAllPackages\" href=\"#top\">Method: listAllPackages</a></h3>\nDescription:<br />\nLists all packages in the channel, regardless of version whose last\n modified date is greater than given date. Example Date: '2008-08-20 08:00:00'\n<p />\n\n\nDeprecated - being replaced by listAllPackages(string sessionKey,\n string channelLabel, dateTime.iso8601 startDate) <p />\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n<li>\n\n    string startDate\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n              \n\n\t     struct - package\n\t<ul>\n      \t<li> string \"name\"</li>\n");
      out.write("      \t<li> string \"version\"</li>\n      \t<li> string \"release\"</li>\n      \t<li> string \"epoch\"</li>\n      \t<li> string \"checksum\"</li>\n      \t<li> string \"checksum_type\"</li>\n      \t<li> int \"id\"</li>\n      \t<li> string \"arch_label\"</li>\n      \t<li> string \"last_modified_date\"</li>\n          <li> string \"last_modified\" - (Deprecated) </li>\n  \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3 class=\"deprecated\"><a name=\"listAllPackagesByDate\" href=\"#top\">Method: listAllPackagesByDate</a></h3>\nDescription:<br />\nLists all packages in the channel, regardless of the package version,\n between the given dates. Example Date: '2008-08-20 08:00:00'\n<p />\n\n\nDeprecated - being replaced by listAllPackages(string sessionKey,\n string channelLabel, dateTime.iso8601 startDate, dateTime.iso8601 endDate) <p />\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n<li>\n\n    string startDate\n </li>\n<li>\n\n    string endDate\n </li>\n</ul>\n<p />\nReturns:\n");
      out.write("<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \t     struct - package\n\t<ul>\n              \t<li> string \"name\"</li>\n              \t<li> string \"version\"</li>\n              \t<li> string \"release\"</li>\n              \t<li> string \"epoch\"</li>\n              \t<li> string \"id\"</li>\n              \t<li> string \"arch_label\"</li>\n              \t<li> string \"last_modified\"</li>\n          \t</ul>\n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3 class=\"deprecated\"><a name=\"listAllPackagesByDate\" href=\"#top\">Method: listAllPackagesByDate</a></h3>\nDescription:<br />\nLists all packages in the channel, regardless of the package version,\n whose last modified date is greater than given date.\n Example Date:  '2008-08-20 08:00:00'\n<p />\n\n\nDeprecated - being replaced by listAllPackages(string sessionKey,\n string channelLabel, dateTime.iso8601 startDate) <p />\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n<li>\n\n    string startDate\n </li>\n</ul>\n<p />\nReturns:\n");
      out.write("<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \t     struct - package\n\t<ul>\n              \t<li> string \"name\"</li>\n              \t<li> string \"version\"</li>\n              \t<li> string \"release\"</li>\n              \t<li> string \"epoch\"</li>\n              \t<li> string \"id\"</li>\n              \t<li> string \"arch_label\"</li>\n              \t<li> string \"last_modified\"</li>\n          \t</ul>\n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3 class=\"deprecated\"><a name=\"listAllPackagesByDate\" href=\"#top\">Method: listAllPackagesByDate</a></h3>\nDescription:<br />\nLists all packages in the channel, regardless of the package version\n<p />\n\n\nDeprecated - being replaced by listAllPackages(string sessionKey,\n string channelLabel) <p />\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \t     struct - package\n\t<ul>\n              \t<li> string \"name\"</li>\n              \t<li> string \"version\"</li>\n");
      out.write("              \t<li> string \"release\"</li>\n              \t<li> string \"epoch\"</li>\n              \t<li> string \"id\"</li>\n              \t<li> string \"arch_label\"</li>\n              \t<li> string \"last_modified\"</li>\n          \t</ul>\n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listArches\" href=\"#top\">Method: listArches</a></h3>\nDescription:<br />\nLists the potential software channel architectures that can be created\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n              \n\n\t     struct - channel arch\n\t<ul>\n          \t<li> string \"name\"</li>\n          \t<li> string \"label\"</li>\n      \t</ul>\n \n          </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listChannelRepos\" href=\"#top\">Method: listChannelRepos</a></h3>\nDescription:<br />\nLists associated repos with the given channel\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel label\n </li>\n");
      out.write("</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"sourceUrl\"</li>\n      \t<li> string \"type\"</li>\n                              \t<li> string \"sslCaDesc\"</li>\n              \t<li> string \"sslCertDesc\"</li>\n              \t<li> string \"sslKeyDesc\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listChildren\" href=\"#top\">Method: listChildren</a></h3>\nDescription:<br />\nList the children of a channel\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - the label of the channel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n              \n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"name\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"arch_name\"</li>\n      \t<li> string \"arch_label\"</li>\n      \t<li> string \"summary\"</li>\n");
      out.write("      \t<li> string \"description\"</li>\n      \t<li> string \"checksum_label\"</li>\n      \t<li> dateTime.iso8601 \"last_modified\"</li>\n      \t<li> string \"maintainer_name\"</li>\n      \t<li> string \"maintainer_email\"</li>\n      \t<li> string \"maintainer_phone\"</li>\n      \t<li> string \"support_policy\"</li>\n      \t<li> string \"gpg_key_url\"</li>\n      \t<li> string \"gpg_key_id\"</li>\n      \t<li> string \"gpg_key_fp\"</li>\n          <li> dateTime.iso8601 \"yumrepo_last_sync\" - (optional) </li>\n      \t<li> string \"end_of_life\"</li>\n      \t<li> string \"parent_channel_label\"</li>\n      \t<li> string \"clone_original\"</li>\n      array:\n  <ul>\n   <li>\n          \t     struct - contentSources\n\t<ul>\n              \t<li> int \"id\"</li>\n              \t<li> string \"label\"</li>\n              \t<li> string \"sourceUrl\"</li>\n              \t<li> string \"type\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listErrata\" href=\"#top\">Method: listErrata</a></h3>\nDescription:<br />\nList the errata applicable to a channel after given startDate\n");
      out.write("<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n<li>\n\n    dateTime.iso8601 startDate\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - errata\n\t<ul>\n              <li> int \"id\" - Errata ID. </li>\n              <li> string \"date\" - Date erratum was created. </li>\n              <li> string \"update_date\" - Date erratum was updated. </li>\n              <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n              <li> string \"advisory_type\" - Type label such as Security, Bug Fix </li>\n              <li> string \"advisory_name\" - Name such as RHSA, etc </li>\n      \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listErrata\" href=\"#top\">Method: listErrata</a></h3>\nDescription:<br />\nList the errata applicable to a channel between startDate and endDate.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n");
      out.write(" </li>\n<li>\n\n    dateTime.iso8601 startDate\n </li>\n<li>\n\n    dateTime.iso8601 endDate\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - errata\n\t<ul>\n              <li> int \"id\" - Errata ID. </li>\n              <li> string \"date\" - Date erratum was created. </li>\n              <li> string \"update_date\" - Date erratum was updated. </li>\n              <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n              <li> string \"advisory_type\" - Type label such as Security, Bug Fix </li>\n              <li> string \"advisory_name\" - Name such as RHSA, etc </li>\n      \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listErrata\" href=\"#top\">Method: listErrata</a></h3>\nDescription:<br />\nList the errata applicable to a channel between startDate and endDate.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n<li>\n\n    dateTime.iso8601 startDate\n </li>\n<li>\n\n    dateTime.iso8601 endDate\n");
      out.write(" </li>\n<li>\n\n    boolean lastModified - select by last modified or not\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - errata\n\t<ul>\n              <li> int \"id\" - Errata ID. </li>\n              <li> string \"date\" - Date erratum was created. </li>\n              <li> string \"update_date\" - Date erratum was updated. </li>\n              <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n              <li> string \"advisory_type\" - Type label such as Security, Bug Fix </li>\n              <li> string \"advisory_name\" - Name such as RHSA, etc </li>\n      \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listErrata\" href=\"#top\">Method: listErrata</a></h3>\nDescription:<br />\nList the errata applicable to a channel\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n      \t     struct - errata\n\t<ul>\n            <li> int \"id\" - Errata Id </li>\n");
      out.write("            <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n            <li> string \"advisory_type\" - Type label such as Security, Bug Fix </li>\n            <li> string \"advisory_name\" - Name such as RHSA, etc </li>\n            <li> string \"advisory\" - name of the advisory (Deprecated) </li>\n            <li> string \"issue_date\" - date format follows YYYY-MM-DD HH24:MI:SS (Deprecated) </li>\n            <li> string \"update_date\" - date format follows YYYY-MM-DD HH24:MI:SS (Deprecated) </li>\n        \t<li> string \"synopsis (Deprecated)\"</li>\n            <li> string \"last_modified_date\" - date format follows YYYY-MM-DD HH24:MI:SS (Deprecated) </li>\n      \t</ul>\n    </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3 class=\"deprecated\"><a name=\"listErrata\" href=\"#top\">Method: listErrata</a></h3>\nDescription:<br />\nList the errata applicable to a channel after given startDate\n<p />\n\n\nDeprecated - being replaced by listErrata(string sessionKey,\n string channelLabel, dateTime.iso8601 startDate) <p />\n\n\nParameters:<br />\n");
      out.write("<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n<li>\n\n    string startDate\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \t     struct - errata\n\t<ul>\n                  <li> string \"advisory\" - name of the advisory </li>\n                  <li> string \"issue_date\" - date format follows YYYY-MM-DD HH24:MI:SS </li>\n                  <li> string \"update_date\" - date format follows YYYY-MM-DD HH24:MI:SS </li>\n              \t<li> string \"synopsis\"</li>\n              \t<li> string \"advisory_type\"</li>\n                  <li> string \"last_modified_date\" - date format follows YYYY-MM-DD HH24:MI:SS </li>\n          \t</ul>\n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3 class=\"deprecated\"><a name=\"listErrata\" href=\"#top\">Method: listErrata</a></h3>\nDescription:<br />\nList the errata applicable to a channel between startDate and endDate.\n<p />\n\n\nDeprecated - being replaced by listErrata(string sessionKey,\n string channelLabel, dateTime.iso8601 startDate, dateTime.iso8601) <p />\n");
      out.write("\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n<li>\n\n    string startDate\n </li>\n<li>\n\n    string endDate\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \t     struct - errata\n\t<ul>\n                  <li> string \"advisory\" - name of the advisory </li>\n                  <li> string \"issue_date\" - date format follows YYYY-MM-DD HH24:MI:SS </li>\n                  <li> string \"update_date\" - date format follows YYYY-MM-DD HH24:MI:SS </li>\n              \t<li> string \"synopsis\"</li>\n              \t<li> string \"advisory_type\"</li>\n                  <li> string \"last_modified_date\" - date format follows YYYY-MM-DD HH24:MI:SS </li>\n          \t</ul>\n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listErrataByType\" href=\"#top\">Method: listErrataByType</a></h3>\nDescription:<br />\nList the errata of a specific type that are applicable to a channel\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n");
      out.write(" </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n<li>\n\n    string advisoryType - type of advisory (one of\n of the following: 'Security Advisory', 'Product Enhancement Advisory',\n 'Bug Fix Advisory'\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \t     struct - errata\n\t<ul>\n                  <li> string \"advisory\" - name of the advisory </li>\n                  <li> string \"issue_date\" - date format follows YYYY-MM-DD HH24:MI:SS </li>\n                  <li> string \"update_date\" - date format follows YYYY-MM-DD HH24:MI:SS </li>\n              \t<li> string \"synopsis\"</li>\n              \t<li> string \"advisory_type\"</li>\n                  <li> string \"last_modified_date\" - date format follows YYYY-MM-DD HH24:MI:SS </li>\n          \t</ul>\n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listErrataNeedingSync\" href=\"#top\">Method: listErrataNeedingSync</a></h3>\nDescription:<br />\nIf you have satellite-synced a new channel then Red Hat\n Errata will have been updated with the packages that are in the newly\n");
      out.write(" synced channel. A cloned erratum will not have been automatically updated\n however. If you cloned a channel that includes those cloned errata and\n should include the new packages, they will not be included when they\n should. This method lists the errata that will be updated if you run the\n syncErrata method.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to update\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - errata\n\t<ul>\n              <li> int \"id\" - Errata ID. </li>\n              <li> string \"date\" - Date erratum was created. </li>\n              <li> string \"update_date\" - Date erratum was updated. </li>\n              <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n              <li> string \"advisory_type\" - Type label such as Security, Bug Fix </li>\n              <li> string \"advisory_name\" - Name such as RHSA, etc </li>\n      \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n");
      out.write("<hr />\n\n<h3> <a name=\"listLatestPackages\" href=\"#top\">Method: listLatestPackages</a></h3>\nDescription:<br />\nLists the packages with the latest version (including release and\n epoch) for the given channel\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \t     struct - package\n\t<ul>\n              \t<li> string \"name\"</li>\n              \t<li> string \"version\"</li>\n              \t<li> string \"release\"</li>\n              \t<li> string \"epoch\"</li>\n              \t<li> int \"id\"</li>\n              \t<li> string \"arch_label\"</li>\n          \t</ul>\n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listPackagesWithoutChannel\" href=\"#top\">Method: listPackagesWithoutChannel</a></h3>\nDescription:<br />\nLists all packages that are not associated with a channel.  Typically\n          these are custom packages.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n");
      out.write(" </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n      \n\n\t     struct - package\n\t<ul>\n      \t<li> string \"name\"</li>\n      \t<li> string \"version\"</li>\n      \t<li> string \"release\"</li>\n      \t<li> string \"epoch\"</li>\n      \t<li> int \"id\"</li>\n      \t<li> string \"arch_label\"</li>\n          <li> string \"path\" - The path on that file system that the package\n             resides </li>\n          <li> string \"provider\" - The provider of the package, determined by\n              the gpg key it was signed with. </li>\n      \t<li> dateTime.iso8601 \"last_modified\"</li>\n  \t</ul>\n \n   </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listRepoFilters\" href=\"#top\">Method: listRepoFilters</a></h3>\nDescription:<br />\nLists the filters for a repo\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string label - repository label\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - filter\n\t<ul>\n      \t<li> int \"sortOrder\"</li>\n      \t<li> string \"filter\"</li>\n");
      out.write("      \t<li> string \"flag\"</li>\n  \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listSubscribedSystems\" href=\"#top\">Method: listSubscribedSystems</a></h3>\nDescription:<br />\nReturns list of subscribed systems for the given channel label\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to query\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n              \t     struct - system\n\t<ul>\n                  \t<li> int \"id\"</li>\n                  \t<li> string \"name\"</li>\n              \t</ul>\n           </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listSystemChannels\" href=\"#top\">Method: listSystemChannels</a></h3>\nDescription:<br />\nReturns a list of channels that a system is subscribed to for the\n given system id\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int serverId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n              \t     struct - channel\n");
      out.write("\t<ul>\n                  \t<li> string \"id\"</li>\n                  \t<li> string \"label\"</li>\n                  \t<li> string \"name\"</li>\n              \t</ul>\n           </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listUserRepos\" href=\"#top\">Method: listUserRepos</a></h3>\nDescription:<br />\nReturns a list of ContentSource (repos) that the user can see\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \t     struct - map\n\t<ul>\n                  <li> long \"id\" - ID of the repo </li>\n                  <li> string \"label\" - label of the repo </li>\n                  <li> string \"sourceUrl\" - URL of the repo </li>\n          \t</ul>\n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"mergeErrata\" href=\"#top\">Method: mergeErrata</a></h3>\nDescription:<br />\nMerges all errata from one channel into another\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string mergeFromLabel - the label of the\n");
      out.write(" channel to pull errata from\n </li>\n<li>\n\n    string mergeToLabel - the label to push the\n errata into\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - errata\n\t<ul>\n              <li> int \"id\" - Errata Id </li>\n              <li> string \"date\" - Date erratum was created. </li>\n              <li> string \"advisory_type\" - Type of the advisory. </li>\n              <li> string \"advisory_name\" - Name of the advisory. </li>\n              <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n     \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"mergeErrata\" href=\"#top\">Method: mergeErrata</a></h3>\nDescription:<br />\nMerges all errata from one channel into another based upon a\n given start/end date.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string mergeFromLabel - the label of the\n channel to pull errata from\n </li>\n<li>\n\n    string mergeToLabel - the label to push the\n errata into\n </li>\n<li>\n\n    string startDate\n");
      out.write(" </li>\n<li>\n\n    string endDate\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - errata\n\t<ul>\n              <li> int \"id\" - Errata Id </li>\n              <li> string \"date\" - Date erratum was created. </li>\n              <li> string \"advisory_type\" - Type of the advisory. </li>\n              <li> string \"advisory_name\" - Name of the advisory. </li>\n              <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n     \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"mergeErrata\" href=\"#top\">Method: mergeErrata</a></h3>\nDescription:<br />\nMerges a list of errata from one channel into another\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string mergeFromLabel - the label of the\n channel to pull errata from\n </li>\n<li>\n\n    string mergeToLabel - the label to push the\n errata into\n </li>\n<li>\n\narray:\n<ul>\n    <li>string -  advisory - The advisory name of the errata to merge</li>\n</ul>\n </li>\n</ul>\n");
      out.write("<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - errata\n\t<ul>\n              <li> int \"id\" - Errata Id </li>\n              <li> string \"date\" - Date erratum was created. </li>\n              <li> string \"advisory_type\" - Type of the advisory. </li>\n              <li> string \"advisory_name\" - Name of the advisory. </li>\n              <li> string \"advisory_synopsis\" - Summary of the erratum. </li>\n     \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"mergePackages\" href=\"#top\">Method: mergePackages</a></h3>\nDescription:<br />\nMerges all packages from one channel into another\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string mergeFromLabel - the label of the\n          channel to pull packages from\n </li>\n<li>\n\n    string mergeToLabel - the label to push the\n              packages into\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - package\n\t<ul>\n      \t<li> string \"name\"</li>\n");
      out.write("      \t<li> string \"version\"</li>\n      \t<li> string \"release\"</li>\n      \t<li> string \"epoch\"</li>\n      \t<li> int \"id\"</li>\n      \t<li> string \"arch_label\"</li>\n          <li> string \"path\" - The path on that file system that the package\n             resides </li>\n          <li> string \"provider\" - The provider of the package, determined by\n              the gpg key it was signed with. </li>\n      \t<li> dateTime.iso8601 \"last_modified\"</li>\n  \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"regenerateNeededCache\" href=\"#top\">Method: regenerateNeededCache</a></h3>\nDescription:<br />\nCompletely clear and regenerate the needed Errata and Package\n      cache for all systems subscribed to the specified channel.  This should\n      be used only if you believe your cache is incorrect for all the systems\n      in a given channel. This will schedule an asynchronous action to actually\n      do the processing.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - the label of the\n");
      out.write("          channel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"regenerateNeededCache\" href=\"#top\">Method: regenerateNeededCache</a></h3>\nDescription:<br />\nCompletely clear and regenerate the needed Errata and Package\n      cache for all systems subscribed.  You must be a Satellite Admin to\n      perform this action. This will schedule an asynchronous action to\n      actually do the processing.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"regenerateYumCache\" href=\"#top\">Method: regenerateYumCache</a></h3>\nDescription:<br />\nRegenerate yum cache for the specified channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - the label of the\n          channel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n");
      out.write("\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removeErrata\" href=\"#top\">Method: removeErrata</a></h3>\nDescription:<br />\nRemoves a given list of errata from the given channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - target channel.\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - advisoryName - name of an erratum to remove</li>\n</ul>\n </li>\n<li>\n\n    boolean removePackages - True to remove packages from the channel\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removePackages\" href=\"#top\">Method: removePackages</a></h3>\nDescription:<br />\nRemoves a given list of packages from the given channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - target channel.\n </li>\n<li>\n\narray:\n<ul>\n    <li>int - packageId -  id of a package to\n                                   remove from the channel.</li>\n");
      out.write("</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removeRepo\" href=\"#top\">Method: removeRepo</a></h3>\nDescription:<br />\nRemoves a repository\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    long id - ID of repo to be removed\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removeRepo\" href=\"#top\">Method: removeRepo</a></h3>\nDescription:<br />\nRemoves a repository\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string label - label of repo to be removed\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removeRepoFilter\" href=\"#top\">Method: removeRepoFilter</a></h3>\nDescription:<br />\nRemoves a filter for a given repo.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n");
      out.write("\n    string sessionKey \n </li>\n<li>\n\n    string label - repository label\n </li>\n<li>\n\n\t     struct - filter_map\n\t<ul>\n              <li> string \"filter\" - string to filter on </li>\n              <li> string \"flag\" - + for include, - for exclude </li>\n  \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setContactDetails\" href=\"#top\">Method: setContactDetails</a></h3>\nDescription:<br />\nSet contact/support information for given channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - label of the channel\n </li>\n<li>\n\n    string maintainerName - name of the channel\n maintainer\n </li>\n<li>\n\n    string maintainerEmail - email of the channel\n maintainer\n </li>\n<li>\n\n    string maintainerPhone - phone number of the channel\n maintainer\n </li>\n<li>\n\n    string supportPolicy - channel support policy\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n");
      out.write(" \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setDetails\" href=\"#top\">Method: setDetails</a></h3>\nDescription:<br />\nAllows to modify channel attributes\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int channelId - channel id\n </li>\n<li>\n\n\t     struct - channel_map\n\t<ul>\n          <li> string \"checksum_label\" - new channel repository checksum label\n          (optional) </li>\n          <li> string \"name\" - new channel name (optional) </li>\n          <li> string \"summary\" - new channel summary (optional) </li>\n          <li> string \"description\" - new channel description (optional) </li>\n          <li> string \"maintainer_name\" - new channel maintainer name\n          (optional) </li>\n          <li> string \"maintainer_email\" - new channel email address\n          (optional) </li>\n          <li> string \"maintainer_phone\" - new channel phone number (optional) </li>\n          <li> string \"gpg_key_url\" - new channel gpg key url (optional) </li>\n          <li> string \"gpg_key_id\" - new channel gpg key id (optional) </li>\n");
      out.write("          <li> string \"gpg_key_fp\" - new channel gpg key fingerprint\n          (optional) </li>\n  \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setDetails\" href=\"#top\">Method: setDetails</a></h3>\nDescription:<br />\nAllows to modify channel attributes\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int channelId - channel id\n </li>\n<li>\n\n\t     struct - channel_map\n\t<ul>\n          <li> string \"checksum_label\" - new channel repository checksum label\n          (optional) </li>\n          <li> string \"name\" - new channel name (optional) </li>\n          <li> string \"summary\" - new channel summary (optional) </li>\n          <li> string \"description\" - new channel description (optional) </li>\n          <li> string \"maintainer_name\" - new channel maintainer name\n          (optional) </li>\n          <li> string \"maintainer_email\" - new channel email address\n          (optional) </li>\n");
      out.write("          <li> string \"maintainer_phone\" - new channel phone number (optional) </li>\n          <li> string \"gpg_key_url\" - new channel gpg key url (optional) </li>\n          <li> string \"gpg_key_id\" - new channel gpg key id (optional) </li>\n          <li> string \"gpg_key_fp\" - new channel gpg key fingerprint\n          (optional) </li>\n  \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setGloballySubscribable\" href=\"#top\">Method: setGloballySubscribable</a></h3>\nDescription:<br />\nSet globally subscribable attribute for given channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - label of the channel\n </li>\n<li>\n\n    boolean subscribable - true if the channel is to be\n          globally subscribable.  False otherwise.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setRepoFilters\" href=\"#top\">Method: setRepoFilters</a></h3>\n");
      out.write("Description:<br />\nReplaces the existing set of filters for a given repo.\n Filters are ranked by their order in the array.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey \n </li>\n<li>\n\n    string label - repository label\n </li>\n<li>\n\narray:\n  <ul>\n   <li>\n      \t     struct - filter_map\n\t<ul>\n              <li> string \"filter\" - string to filter on </li>\n              <li> string \"flag\" - + for include, - for exclude </li>\n      \t</ul>\n  </li></ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3 class=\"deprecated\"><a name=\"setSystemChannels\" href=\"#top\">Method: setSystemChannels</a></h3>\nDescription:<br />\nChange a systems subscribed channels to the list of channels passed in.\n<p />\n\n\nDeprecated - being replaced by system.setBaseChannel(string sessionKey,\n int serverId, string channelLabel) and system.setChildChannels(string sessionKey,\n int serverId, array[string channelLabel]) <p />\n\n\nParameters:<br />\n<ul>\n<li>\n");
      out.write("\n        string sessionKey\n </li>\n<li>\n\n    int serverId\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - channelLabel - labels of the channels to\n              subscribe the system to.</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setUserManageable\" href=\"#top\">Method: setUserManageable</a></h3>\nDescription:<br />\nSet the manageable flag for a given channel and user.\n If value is set to 'true', this method will give the user\n manage permissions to the channel. Otherwise, that privilege is revoked.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - label of the channel\n </li>\n<li>\n\n    string login - login of the target user\n </li>\n<li>\n\n    boolean value - value of the flag to set\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setUserSubscribable\" href=\"#top\">Method: setUserSubscribable</a></h3>\n");
      out.write("Description:<br />\nSet the subscribable flag for a given channel and user.\n If value is set to 'true', this method will give the user\n subscribe permissions to the channel. Otherwise, that privilege is revoked.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - label of the channel\n </li>\n<li>\n\n    string login - login of the target user\n </li>\n<li>\n\n    boolean value - value of the flag to set\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3 class=\"deprecated\"><a name=\"subscribeSystem\" href=\"#top\">Method: subscribeSystem</a></h3>\nDescription:<br />\nSubscribes a system to a list of channels.  If a base channel is\n      included, that is set before setting child channels.  When setting child\n      channels the current child channel subscriptions are cleared.  To fully\n      unsubscribe the system from all channels, simply provide an empty list of\n      channel labels.\n<p />\n");
      out.write("\n\nDeprecated - being replaced by system.setBaseChannel(string sessionKey,\n int serverId, string channelLabel) and system.setChildChannels(string sessionKey,\n int serverId, array[string channelLabel]) <p />\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int serverId\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - label - channel label to subscribe\n                  the system to.</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"syncErrata\" href=\"#top\">Method: syncErrata</a></h3>\nDescription:<br />\nIf you have satellite-synced a new channel then Red Hat\n Errata will have been updated with the packages that are in the newly\n synced channel. A cloned erratum will not have been automatically updated\n however. If you cloned a channel that includes those cloned errata and\n should include the new packages, they will not be included when they\n should. This method updates all the errata in the given cloned channel\n");
      out.write(" with packages that have recently been added, and ensures that all the\n packages you expect are in the channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel to update\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"syncRepo\" href=\"#top\">Method: syncRepo</a></h3>\nDescription:<br />\nTrigger immediate repo synchronization\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel label\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"syncRepo\" href=\"#top\">Method: syncRepo</a></h3>\nDescription:<br />\nTrigger immediate repo synchronization\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel label\n </li>\n<li>\n\n\t     struct - params_map\n\t<ul>\n        <li> Boolean \"sync-kickstart\" - Create kickstartable tree - Optional </li>\n");
      out.write("        <li> Boolean \"no-errata\" - Do not sync errata - Optional </li>\n        <li> Boolean \"fail\" - Terminate upon any error - Optional </li>\n        <li> Boolean \"latest\" - Only download latest packages - Optional </li>\n  \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"syncRepo\" href=\"#top\">Method: syncRepo</a></h3>\nDescription:<br />\nSchedule periodic repo synchronization\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel label\n </li>\n<li>\n\n    string cron expression - if empty all periodic schedules will be disabled\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"syncRepo\" href=\"#top\">Method: syncRepo</a></h3>\nDescription:<br />\nSchedule periodic repo synchronization\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string channelLabel - channel label\n");
      out.write(" </li>\n<li>\n\n    string cron expression - if empty all periodic schedules will be disabled\n </li>\n<li>\n\n\t     struct - params_map\n\t<ul>\n        <li> Boolean \"sync-kickstart\" - Create kickstartable tree - Optional </li>\n        <li> Boolean \"no-errata\" - Do not sync errata - Optional </li>\n        <li> Boolean \"fail\" - Terminate upon any error - Optional </li>\n        <li> Boolean \"latest\" - Only download latest packages - Optional </li>\n  \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"updateRepo\" href=\"#top\">Method: updateRepo</a></h3>\nDescription:<br />\nUpdates a ContentSource (repo)\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int id - repository id\n </li>\n<li>\n\n    string label - new repository label\n </li>\n<li>\n\n    string url - new repository URL\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"label\"</li>\n");
      out.write("      \t<li> string \"sourceUrl\"</li>\n      \t<li> string \"type\"</li>\n                              \t<li> string \"sslCaDesc\"</li>\n              \t<li> string \"sslCertDesc\"</li>\n              \t<li> string \"sslKeyDesc\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"updateRepoLabel\" href=\"#top\">Method: updateRepoLabel</a></h3>\nDescription:<br />\nUpdates repository label\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int id - repository id\n </li>\n<li>\n\n    string label - new repository label\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"sourceUrl\"</li>\n      \t<li> string \"type\"</li>\n                              \t<li> string \"sslCaDesc\"</li>\n              \t<li> string \"sslCertDesc\"</li>\n              \t<li> string \"sslKeyDesc\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"updateRepoLabel\" href=\"#top\">Method: updateRepoLabel</a></h3>\n");
      out.write("Description:<br />\nUpdates repository label\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string label - repository label\n </li>\n<li>\n\n    string newLabel - new repository label\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"sourceUrl\"</li>\n      \t<li> string \"type\"</li>\n                              \t<li> string \"sslCaDesc\"</li>\n              \t<li> string \"sslCertDesc\"</li>\n              \t<li> string \"sslKeyDesc\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"updateRepoSsl\" href=\"#top\">Method: updateRepoSsl</a></h3>\nDescription:<br />\nUpdates repository SSL certificates\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int id - repository id\n </li>\n<li>\n\n    string sslCaCert - SSL CA cert description\n </li>\n<li>\n\n    string sslCliCert - SSL Client cert description\n </li>\n<li>\n\n    string sslCliKey - SSL Client key description\n");
      out.write(" </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"sourceUrl\"</li>\n      \t<li> string \"type\"</li>\n                              \t<li> string \"sslCaDesc\"</li>\n              \t<li> string \"sslCertDesc\"</li>\n              \t<li> string \"sslKeyDesc\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"updateRepoSsl\" href=\"#top\">Method: updateRepoSsl</a></h3>\nDescription:<br />\nUpdates repository SSL certificates\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string label - repository label\n </li>\n<li>\n\n    string sslCaCert - SSL CA cert description\n </li>\n<li>\n\n    string sslCliCert - SSL Client cert description\n </li>\n<li>\n\n    string sslCliKey - SSL Client key description\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"sourceUrl\"</li>\n");
      out.write("      \t<li> string \"type\"</li>\n                              \t<li> string \"sslCaDesc\"</li>\n              \t<li> string \"sslCertDesc\"</li>\n              \t<li> string \"sslKeyDesc\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"updateRepoUrl\" href=\"#top\">Method: updateRepoUrl</a></h3>\nDescription:<br />\nUpdates repository source URL\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int id - repository id\n </li>\n<li>\n\n    string url - new repository url\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"sourceUrl\"</li>\n      \t<li> string \"type\"</li>\n                              \t<li> string \"sslCaDesc\"</li>\n              \t<li> string \"sslCertDesc\"</li>\n              \t<li> string \"sslKeyDesc\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"updateRepoUrl\" href=\"#top\">Method: updateRepoUrl</a></h3>\n");
      out.write("Description:<br />\nUpdates repository source URL\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string label - repository label\n </li>\n<li>\n\n    string url - new repository url\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - channel\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"label\"</li>\n      \t<li> string \"sourceUrl\"</li>\n      \t<li> string \"type\"</li>\n                              \t<li> string \"sslCaDesc\"</li>\n              \t<li> string \"sslCertDesc\"</li>\n              \t<li> string \"sslKeyDesc\"</li>\n          \t</ul>\n      </li></ul>\n  \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
