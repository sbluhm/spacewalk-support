/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2020-03-09 19:26:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apidoc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n<head>\n  <meta http-equiv=\"cache-control\" content=\"no-cache\" />\n<style type=\"text/css\">\nul.apidoc {\n   list-style-image: url('/img/parent_node.gif');\n}\n</style>\n\n</head>\n<body>\n<h1><i class=\"fa fa-gears\"></i>API Overview</h1>\nWelcome to the Red Hat Satellite API.  By using the included API calls, you can more easily automate many of the tasks you perform everyday.  All API calls are grouped by common functionality.\n<h2>Namespaces</h2>\n   <ul class=\"apidoc\">\n    <li><a href=\"handlers/ActionChainHandler.jsp\">actionchain</a></li> \n    <li><a href=\"handlers/ActivationKeyHandler.jsp\">activationkey</a></li> \n    <li><a href=\"handlers/ApiHandler.jsp\">api</a></li> \n    <li><a href=\"handlers/AuthHandler.jsp\">auth</a></li> \n    <li><a href=\"handlers/ChannelHandler.jsp\">channel</a></li> \n    <li><a href=\"handlers/ChannelAccessHandler.jsp\">channel.access</a></li> \n    <li><a href=\"handlers/ChannelOrgHandler.jsp\">channel.org</a></li> \n    <li><a href=\"handlers/ChannelSoftwareHandler.jsp\">channel.software</a></li> \n    <li><a href=\"handlers/ConfigChannelHandler.jsp\">configchannel</a></li> \n");
      out.write("    <li><a href=\"handlers/DistChannelHandler.jsp\">distchannel</a></li> \n    <li><a href=\"handlers/ErrataHandler.jsp\">errata</a></li> \n    <li><a href=\"handlers/KickstartHandler.jsp\">kickstart</a></li> \n    <li><a href=\"handlers/FilePreservationListHandler.jsp\">kickstart.filepreservation</a></li> \n    <li><a href=\"handlers/CryptoKeysHandler.jsp\">kickstart.keys</a></li> \n    <li><a href=\"handlers/ProfileHandler.jsp\">kickstart.profile</a></li> \n    <li><a href=\"handlers/KeysHandler.jsp\">kickstart.profile.keys</a></li> \n    <li><a href=\"handlers/SoftwareHandler.jsp\">kickstart.profile.software</a></li> \n    <li><a href=\"handlers/SystemDetailsHandler.jsp\">kickstart.profile.system</a></li> \n    <li><a href=\"handlers/SnippetHandler.jsp\">kickstart.snippet</a></li> \n    <li><a href=\"handlers/KickstartTreeHandler.jsp\">kickstart.tree</a></li> \n    <li><a href=\"handlers/OrgHandler.jsp\">org</a></li> \n    <li><a href=\"handlers/OrgTrustHandler.jsp\">org.trusts</a></li> \n    <li><a href=\"handlers/PackagesHandler.jsp\">packages</a></li> \n");
      out.write("    <li><a href=\"handlers/PackagesProviderHandler.jsp\">packages.provider</a></li> \n    <li><a href=\"handlers/PackagesSearchHandler.jsp\">packages.search</a></li> \n    <li><a href=\"handlers/PreferencesLocaleHandler.jsp\">preferences.locale</a></li> \n    <li><a href=\"handlers/ProxyHandler.jsp\">proxy</a></li> \n    <li><a href=\"handlers/SatelliteHandler.jsp\">satellite</a></li> \n    <li><a href=\"handlers/ScheduleHandler.jsp\">schedule</a></li> \n    <li><a href=\"handlers/MasterHandler.jsp\">sync.master</a></li> \n    <li><a href=\"handlers/SlaveHandler.jsp\">sync.slave</a></li> \n    <li><a href=\"handlers/SystemHandler.jsp\">system</a></li> \n    <li><a href=\"handlers/ServerConfigHandler.jsp\">system.config</a></li> \n    <li><a href=\"handlers/CrashHandler.jsp\">system.crash</a></li> \n    <li><a href=\"handlers/CustomInfoHandler.jsp\">system.custominfo</a></li> \n    <li><a href=\"handlers/SnapshotHandler.jsp\">system.provisioning.snapshot</a></li> \n    <li><a href=\"handlers/SystemScapHandler.jsp\">system.scap</a></li> \n    <li><a href=\"handlers/SystemSearchHandler.jsp\">system.search</a></li> \n");
      out.write("    <li><a href=\"handlers/ServerGroupHandler.jsp\">systemgroup</a></li> \n    <li><a href=\"handlers/UserHandler.jsp\">user</a></li> \n    <li><a href=\"handlers/UserExternalHandler.jsp\">user.external</a></li> \n\n   </ul>\n</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
