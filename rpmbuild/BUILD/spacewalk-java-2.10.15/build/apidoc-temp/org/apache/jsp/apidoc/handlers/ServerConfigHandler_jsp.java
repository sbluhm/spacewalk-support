/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2020-03-09 19:26:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apidoc.handlers;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ServerConfigHandler_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n<head>\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n\n<style type=\"text/css\">\nul.apidoc {\n   list-style-image: url('/img/parent_node.gif');\n}\n\n.deprecated {\n   text-decoration: line-through;\n}\n</style>\n</head>\n<body>\n<div class=\"spacewalk-toolbar-h1\">\n<h1><i class=\"fa fa-gears\"></i>API Overview</h1>\n</div>\n\n<h2>Description</h2>\n<p><strong>Namespace</strong>:\nsystem.config\n</p>\n<p>Provides methods to access and modify many aspects of\n configuration channels and server association.\n basically system.config name space</p>\n<span class=\"small-text\">( <a href=\"/rhn/apidoc/index.jsp\">Return to API Overview</a> )</span>\n<hr />\n\n<div class=\"rounded-box\">\n<h2><a name=\"top\">Available methods</a></h2>\n<ul class=\"apidoc\">\n\n<li><a href=\"#addChannels\"/>addChannels</a></li>\n<li><a href=\"#createOrUpdatePath\"/>createOrUpdatePath</a></li>\n<li><a href=\"#createOrUpdateSymlink\"/>createOrUpdateSymlink</a></li>\n<li><a href=\"#deleteFiles\"/>deleteFiles</a></li>\n<li><a href=\"#deployAll\"/>deployAll</a></li>\n<li><a href=\"#listChannels\"/>listChannels</a></li>\n");
      out.write("<li><a href=\"#listFiles\"/>listFiles</a></li>\n<li><a href=\"#lookupFileInfo\"/>lookupFileInfo</a></li>\n<li><a href=\"#removeChannels\"/>removeChannels</a></li>\n<li><a href=\"#setChannels\"/>setChannels</a></li>\n</ul>\n</div>\n<hr />\n\n<h3> <a name=\"addChannels\" href=\"#top\">Method: addChannels</a></h3>\nDescription:<br />\nGiven a list of servers and configuration channels,\n this method appends the configuration channels to either the top or\n the bottom (whichever you specify) of a system's subscribed\n configuration channels list. The ordering of the configuration channels\n provided in the add list is maintained while adding.\n If one of the configuration channels in the 'add' list\n has been previously subscribed by a server, the\n subscribed channel will be re-ranked to the appropriate place.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\narray:\n<ul>\n    <li>int - IDs of the systems to add the channels to.</li>\n</ul>\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - List of configuration channel labels in the ranked order.</li>\n");
      out.write("</ul>\n </li>\n<li>\n\n    boolean addToTop\n      \t<ul>\n          \t<li>true - to prepend the given channels\n          list to the top of the configuration channels list of a server</li>\n          \t<li>false - to append the given  channels\n          list to the bottom of the configuration channels list of a server</li>\n      \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"createOrUpdatePath\" href=\"#top\">Method: createOrUpdatePath</a></h3>\nDescription:<br />\nCreate a new file (text or binary) or directory with the given path, or\n update an existing path on a server.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int serverId\n </li>\n<li>\n\n    string path - the configuration file/directory path\n </li>\n<li>\n\n    boolean isDir\n      \t<ul>\n          \t<li>True - if the path is a directory</li>\n          \t<li>False - if the path is a file</li>\n      \t</ul>\n </li>\n<li>\n\n\t     struct - path info\n");
      out.write("\t<ul>\n          <li> string \"contents\" - Contents of the file (text or base64 encoded if binary)\n                   ((only for non-directories) </li>\n          <li> boolean \"contents_enc64\" - Identifies base64 encoded content\n                  (default: disabled, only for non-directories). </li>\n          <li> string \"owner\" - Owner of the file/directory. </li>\n          <li> string \"group\" - Group name of the file/directory. </li>\n          <li> string \"permissions\" - Octal file/directory permissions (eg: 644) </li>\n          <li> string \"macro-start-delimiter\" - Config file macro end delimiter. Use null or empty string\n              to accept the default. (only for non-directories) </li>\n          <li> string \"macro-end-delimiter\" - Config file macro end delimiter. Use null or empty string\n              to accept the default. (only for non-directories) </li>\n          <li> string \"selinux_ctx\" - SeLinux context (optional) </li>\n          <li> int \"revision\" - next revision number, auto increment for null </li>\n");
      out.write("          <li> boolean \"binary\" - mark the binary content, if True,\n      base64 encoded content is expected (only for non-directories) </li>\n  \t</ul>\n </li>\n<li>\n\n    int commitToLocal\n      \t<ul>\n          \t<li>1 - to commit configuration files\n              to the system's local override configuration channel</li>\n          \t<li>0 - to commit configuration files\n              to the system's sandbox configuration channel</li>\n      \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Configuration Revision information\n\t<ul>\n   \t<li> string \"type\"</li>\n              \t<ul>\n                  \t<li>file</li>\n                  \t<li>directory</li>\n                  \t<li>symlink</li>\n              \t</ul>\n       <li> string \"path\" - File Path </li>\n       <li> string \"target_path\" - Symbolic link Target File Path.\n                              Present for Symbolic links only. </li>\n       <li> string \"channel\" - Channel Name </li>\n       <li> string \"contents\" - File contents (base64 encoded according\n");
      out.write("                to the contents_enc64 attribute) </li>\n       <li> boolean \"contents_enc64\" -  Identifies base64 encoded content </li>\n       <li> int \"revision\" - File Revision </li>\n       <li> dateTime.iso8601 \"creation\" - Creation Date </li>\n       <li> dateTime.iso8601 \"modified\" - Last Modified Date </li>\n       <li> string \"owner\" - File Owner. Present for files or directories only. </li>\n       <li> string \"group\" - File Group. Present for files or directories only. </li>\n       <li> int \"permissions\" - File Permissions (Deprecated).\n                                  Present for files or directories only. </li>\n       <li> string \"permissions_mode\" - File Permissions.\n                                      Present for files or directories only. </li>\n       <li> string \"selinux_ctx\" - SELinux Context (optional). </li>\n       <li> boolean \"binary\" - true/false , Present for files only. </li>\n       <li> string \"sha256\" - File's sha256 signature. Present for files only. </li>\n       <li> string \"macro-start-delimiter\" - Macro start delimiter for a config file. Present for text files only. </li>\n");
      out.write("       <li> string \"macro-end-delimiter\" - Macro end delimiter for a config file. Present for text files only. </li>\n \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\nAvailable since: 10.2 <p />\n<hr />\n\n<h3> <a name=\"createOrUpdateSymlink\" href=\"#top\">Method: createOrUpdateSymlink</a></h3>\nDescription:<br />\nCreate a new symbolic link with the given path, or\n update an existing path.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int serverId\n </li>\n<li>\n\n    string path - the configuration file/directory path\n </li>\n<li>\n\n\t     struct - path info\n\t<ul>\n          <li> string \"target_path\" - The target path for the symbolic link </li>\n          <li> string \"selinux_ctx\" - SELinux Security context (optional) </li>\n          <li> int \"revision\" - next revision number, auto increment for null </li>\n  \t</ul>\n </li>\n<li>\n\n    int commitToLocal\n      \t<ul>\n          \t<li>1 - to commit configuration files\n              to the system's local override configuration channel</li>\n          \t<li>0 - to commit configuration files\n");
      out.write("              to the system's sandbox configuration channel</li>\n      \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Configuration Revision information\n\t<ul>\n   \t<li> string \"type\"</li>\n              \t<ul>\n                  \t<li>file</li>\n                  \t<li>directory</li>\n                  \t<li>symlink</li>\n              \t</ul>\n       <li> string \"path\" - File Path </li>\n       <li> string \"target_path\" - Symbolic link Target File Path.\n                              Present for Symbolic links only. </li>\n       <li> string \"channel\" - Channel Name </li>\n       <li> string \"contents\" - File contents (base64 encoded according\n                to the contents_enc64 attribute) </li>\n       <li> boolean \"contents_enc64\" -  Identifies base64 encoded content </li>\n       <li> int \"revision\" - File Revision </li>\n       <li> dateTime.iso8601 \"creation\" - Creation Date </li>\n       <li> dateTime.iso8601 \"modified\" - Last Modified Date </li>\n       <li> string \"owner\" - File Owner. Present for files or directories only. </li>\n");
      out.write("       <li> string \"group\" - File Group. Present for files or directories only. </li>\n       <li> int \"permissions\" - File Permissions (Deprecated).\n                                  Present for files or directories only. </li>\n       <li> string \"permissions_mode\" - File Permissions.\n                                      Present for files or directories only. </li>\n       <li> string \"selinux_ctx\" - SELinux Context (optional). </li>\n       <li> boolean \"binary\" - true/false , Present for files only. </li>\n       <li> string \"sha256\" - File's sha256 signature. Present for files only. </li>\n       <li> string \"macro-start-delimiter\" - Macro start delimiter for a config file. Present for text files only. </li>\n       <li> string \"macro-end-delimiter\" - Macro end delimiter for a config file. Present for text files only. </li>\n \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\nAvailable since: 10.2 <p />\n<hr />\n\n<h3> <a name=\"deleteFiles\" href=\"#top\">Method: deleteFiles</a></h3>\nDescription:<br />\nRemoves file paths from a local or sandbox channel of a server.\n");
      out.write("<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int serverId\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - paths to remove.</li>\n</ul>\n </li>\n<li>\n\n    boolean deleteFromLocal\n      \t<ul>\n          \t<li>True - to delete configuration file paths\n              from the system's local override configuration channel</li>\n          \t<li>False - to delete configuration file paths\n              from the system's sandbox configuration channel</li>\n      \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"deployAll\" href=\"#top\">Method: deployAll</a></h3>\nDescription:<br />\nSchedules a deploy action for all the configuration files\n on the given list of systems.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\narray:\n<ul>\n    <li>int - id of the systems to schedule configuration files deployment</li>\n</ul>\n </li>\n<li>\n\n    dateTime.iso8601 date - Earliest date for the deploy action.\n");
      out.write(" </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listChannels\" href=\"#top\">Method: listChannels</a></h3>\nDescription:<br />\nList all global configuration channels associated to a\n              system in the order of their ranking.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int serverId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n  \n\n\t     struct - Configuration Channel information\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> int \"orgId\"</li>\n   \t<li> string \"label\"</li>\n   \t<li> string \"name\"</li>\n   \t<li> string \"description\"</li>\n   \t<li> struct \"configChannelType\"</li>\n   \n\n\t     struct - Configuration Channel Type information\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> string \"label\"</li>\n   \t<li> string \"name\"</li>\n   \t<li> int \"priority\"</li>\n \t</ul>\n \n \t</ul>\n \n  </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listFiles\" href=\"#top\">Method: listFiles</a></h3>\n");
      out.write("Description:<br />\nReturn the list of files in a given channel.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int serverId\n </li>\n<li>\n\n    int listLocal\n      \t<ul>\n          \t<li>1 - to return configuration files\n              in the system's local override configuration channel</li>\n          \t<li>0 - to return configuration files\n              in the system's sandbox configuration channel</li>\n      \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n \n\n\t     struct - Configuration File information\n\t<ul>\n   \t<li> string \"type\"</li>\n              \t<ul>\n                  \t<li>file</li>\n                  \t<li>directory</li>\n                  \t<li>symlink</li>\n              \t</ul>\n       <li> string \"path\" - File Path </li>\n       <li> string \"channel_label\" - the label of the  central configuration channel\n      that has this file. Note this entry only shows up\n      if the file has not been overridden by a central channel. </li>\n   \t<li> struct \"channel_type\"</li>\n");
      out.write("   \n\n\t     struct - Configuration Channel Type information\n\t<ul>\n   \t<li> int \"id\"</li>\n   \t<li> string \"label\"</li>\n   \t<li> string \"name\"</li>\n   \t<li> int \"priority\"</li>\n \t</ul>\n \n       <li> dateTime.iso8601 \"last_modified\" - Last Modified Date </li>\n \t</ul>\n \n </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"lookupFileInfo\" href=\"#top\">Method: lookupFileInfo</a></h3>\nDescription:<br />\nGiven a list of paths and a server, returns details about\n the latest revisions of the paths.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    int serverId\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - paths to lookup on.</li>\n</ul>\n </li>\n<li>\n\n    int searchLocal\n      \t<ul>\n          \t<li>1 - to search configuration file paths\n              in the system's local override configuration or\n              systems subscribed central channels</li>\n          \t<li>0 - to search configuration file paths\n              in the system's sandbox configuration channel</li>\n      \t</ul>\n </li>\n</ul>\n");
      out.write("<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - Configuration Revision information\n\t<ul>\n   \t<li> string \"type\"</li>\n              \t<ul>\n                  \t<li>file</li>\n                  \t<li>directory</li>\n                  \t<li>symlink</li>\n              \t</ul>\n       <li> string \"path\" - File Path </li>\n       <li> string \"target_path\" - Symbolic link Target File Path.\n                              Present for Symbolic links only. </li>\n       <li> string \"channel\" - Channel Name </li>\n       <li> string \"contents\" - File contents (base64 encoded according\n                to the contents_enc64 attribute) </li>\n       <li> boolean \"contents_enc64\" -  Identifies base64 encoded content </li>\n       <li> int \"revision\" - File Revision </li>\n       <li> dateTime.iso8601 \"creation\" - Creation Date </li>\n       <li> dateTime.iso8601 \"modified\" - Last Modified Date </li>\n       <li> string \"owner\" - File Owner. Present for files or directories only. </li>\n       <li> string \"group\" - File Group. Present for files or directories only. </li>\n");
      out.write("       <li> int \"permissions\" - File Permissions (Deprecated).\n                                  Present for files or directories only. </li>\n       <li> string \"permissions_mode\" - File Permissions.\n                                      Present for files or directories only. </li>\n       <li> string \"selinux_ctx\" - SELinux Context (optional). </li>\n       <li> boolean \"binary\" - true/false , Present for files only. </li>\n       <li> string \"sha256\" - File's sha256 signature. Present for files only. </li>\n       <li> string \"macro-start-delimiter\" - Macro start delimiter for a config file. Present for text files only. </li>\n       <li> string \"macro-end-delimiter\" - Macro end delimiter for a config file. Present for text files only. </li>\n \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\nAvailable since: 10.2 <p />\n<hr />\n\n<h3> <a name=\"removeChannels\" href=\"#top\">Method: removeChannels</a></h3>\nDescription:<br />\nRemove config channels from the given servers.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n");
      out.write(" </li>\n<li>\n\narray:\n<ul>\n    <li>int - the IDs of the systems from which you\n              would like to remove configuration channels..</li>\n</ul>\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - List of configuration channel labels to remove.</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setChannels\" href=\"#top\">Method: setChannels</a></h3>\nDescription:<br />\nReplace the existing set of config channels on the given servers.\n Channels are ranked according to their order in the configChannelLabels\n array.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\narray:\n<ul>\n    <li>int - IDs of the systems to set the channels on.</li>\n</ul>\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - List of configuration channel labels in the ranked order.</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
