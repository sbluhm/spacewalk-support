/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2020-03-09 19:26:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apidoc.handlers;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class UserHandler_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n<head>\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n\n<style type=\"text/css\">\nul.apidoc {\n   list-style-image: url('/img/parent_node.gif');\n}\n\n.deprecated {\n   text-decoration: line-through;\n}\n</style>\n</head>\n<body>\n<div class=\"spacewalk-toolbar-h1\">\n<h1><i class=\"fa fa-gears\"></i>API Overview</h1>\n</div>\n\n<h2>Description</h2>\n<p><strong>Namespace</strong>:\nuser\n</p>\n<p>User namespace contains methods to access common user functions\n available from the web user interface.</p>\n<span class=\"small-text\">( <a href=\"/rhn/apidoc/index.jsp\">Return to API Overview</a> )</span>\n<hr />\n\n<div class=\"rounded-box\">\n<h2><a name=\"top\">Available methods</a></h2>\n<ul class=\"apidoc\">\n\n<li><a href=\"#addAssignedSystemGroup\"/>addAssignedSystemGroup</a></li>\n<li><a href=\"#addAssignedSystemGroups\"/>addAssignedSystemGroups</a></li>\n<li><a href=\"#addDefaultSystemGroup\"/>addDefaultSystemGroup</a></li>\n<li><a href=\"#addDefaultSystemGroups\"/>addDefaultSystemGroups</a></li>\n<li><a href=\"#addRole\"/>addRole</a></li>\n<li><a href=\"#create\"/>create</a></li>\n");
      out.write("<li><a href=\"#create\"/>create</a></li>\n<li><a href=\"#delete\"/>delete</a></li>\n<li><a href=\"#disable\"/>disable</a></li>\n<li><a href=\"#enable\"/>enable</a></li>\n<li><a href=\"#getCreateDefaultSystemGroup\"/>getCreateDefaultSystemGroup</a></li>\n<li><a href=\"#getDetails\"/>getDetails</a></li>\n<li><a href=\"#getLoggedInTime\"/>getLoggedInTime</a></li>\n<li><a href=\"#listAssignableRoles\"/>listAssignableRoles</a></li>\n<li><a href=\"#listAssignedSystemGroups\"/>listAssignedSystemGroups</a></li>\n<li><a href=\"#listDefaultSystemGroups\"/>listDefaultSystemGroups</a></li>\n<li><a href=\"#listRoles\"/>listRoles</a></li>\n<li><a href=\"#listUsers\"/>listUsers</a></li>\n<li><a href=\"#removeAssignedSystemGroup\"/>removeAssignedSystemGroup</a></li>\n<li><a href=\"#removeAssignedSystemGroups\"/>removeAssignedSystemGroups</a></li>\n<li><a href=\"#removeDefaultSystemGroup\"/>removeDefaultSystemGroup</a></li>\n<li><a href=\"#removeDefaultSystemGroups\"/>removeDefaultSystemGroups</a></li>\n<li><a href=\"#removeRole\"/>removeRole</a></li>\n<li><a href=\"#setCreateDefaultSystemGroup\"/>setCreateDefaultSystemGroup</a></li>\n");
      out.write("<li><a href=\"#setDetails\"/>setDetails</a></li>\n<li><a href=\"#setErrataNotifications\"/>setErrataNotifications</a></li>\n<li><a href=\"#setReadOnly\"/>setReadOnly</a></li>\n<li><a href=\"#usePamAuthentication\"/>usePamAuthentication</a></li>\n</ul>\n</div>\n<hr />\n\n<h3> <a name=\"addAssignedSystemGroup\" href=\"#top\">Method: addAssignedSystemGroup</a></h3>\nDescription:<br />\nAdd system group to user's list of assigned system groups.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n<li>\n\n    string serverGroupName\n </li>\n<li>\n\n    boolean setDefault - Should system group also be\n added to user's list of default system groups.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"addAssignedSystemGroups\" href=\"#top\">Method: addAssignedSystemGroups</a></h3>\nDescription:<br />\nAdd system groups to user's list of assigned system groups.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n");
      out.write("<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - serverGroupName</li>\n</ul>\n </li>\n<li>\n\n    boolean setDefault - Should system groups also be\n added to user's list of default system groups.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"addDefaultSystemGroup\" href=\"#top\">Method: addDefaultSystemGroup</a></h3>\nDescription:<br />\nAdd system group to user's list of default system groups.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n<li>\n\n    string serverGroupName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"addDefaultSystemGroups\" href=\"#top\">Method: addDefaultSystemGroups</a></h3>\nDescription:<br />\nAdd system groups to user's list of default system groups.\n<p />\n\n\n\n\nParameters:<br />\n");
      out.write("<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - serverGroupName</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"addRole\" href=\"#top\">Method: addRole</a></h3>\nDescription:<br />\nAdds a role to a user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User login name to update.\n </li>\n<li>\n\n    string role - Role label to add.  Can be any of:\n satellite_admin, org_admin, channel_admin, config_admin, system_group_admin, or\n activation_key_admin.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"create\" href=\"#top\">Method: create</a></h3>\nDescription:<br />\nCreate a new user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string desiredLogin - Desired login name, will fail if\n");
      out.write(" already in use.\n </li>\n<li>\n\n    string desiredPassword\n </li>\n<li>\n\n    string firstName\n </li>\n<li>\n\n    string lastName\n </li>\n<li>\n\n    string email - User's e-mail address.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"create\" href=\"#top\">Method: create</a></h3>\nDescription:<br />\nCreate a new user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string desiredLogin - Desired login name,\n will fail if already in use.\n </li>\n<li>\n\n    string desiredPassword\n </li>\n<li>\n\n    string firstName\n </li>\n<li>\n\n    string lastName\n </li>\n<li>\n\n    string email - User's e-mail address.\n </li>\n<li>\n\n    int usePamAuth - 1 if you wish to use PAM\n authentication for this user, 0 otherwise.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"delete\" href=\"#top\">Method: delete</a></h3>\nDescription:<br />\n");
      out.write("Delete a user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User login name to delete.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"disable\" href=\"#top\">Method: disable</a></h3>\nDescription:<br />\nDisable a user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User login name to disable.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"enable\" href=\"#top\">Method: enable</a></h3>\nDescription:<br />\nEnable a user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User login name to enable.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getCreateDefaultSystemGroup\" href=\"#top\">Method: getCreateDefaultSystemGroup</a></h3>\n");
      out.write("Description:<br />\nReturns the current value of the CreateDefaultSystemGroup setting.\n If True this will cause there to be a system group created (with the same name\n as the user) every time a new user is created, with the user automatically given\n permission to that system group and the system group being set as the default\n group for the user (so every time the user registers a system it will be\n placed in that system group by default). This can be useful if different\n users will administer different groups of servers in the same organization.\n Can only be called by an org_admin.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getDetails\" href=\"#top\">Method: getDetails</a></h3>\nDescription:<br />\nReturns the details about a given user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n");
      out.write("</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\t     struct - user details\n\t<ul>\n         <li> string \"first_names\" - deprecated, use first_name </li>\n     \t<li> string \"first_name\"</li>\n     \t<li> string \"last_name\"</li>\n     \t<li> string \"email\"</li>\n     \t<li> int \"org_id\"</li>\n     \t<li> string \"org_name\"</li>\n     \t<li> string \"prefix\"</li>\n     \t<li> string \"last_login_date\"</li>\n     \t<li> string \"created_date\"</li>\n         <li> boolean \"enabled\" - true if user is enabled,\n     false if the user is disabled </li>\n         <li> boolean \"use_pam\" - true if user is configured to use\n     PAM authentication </li>\n         <li> boolean \"read_only\" - true if user is readonly </li>\n         <li> boolean \"errata_notification\" - true if errata e-mail notification\n     is enabled for the user </li>\n   \t</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3 class=\"deprecated\"><a name=\"getLoggedInTime\" href=\"#top\">Method: getLoggedInTime</a></h3>\nDescription:<br />\nReturns the time user last logged in.\n<p />\n\n\nDeprecated - Never returned usable value. <p />\n");
      out.write("\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\ndateTime.iso8601 \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listAssignableRoles\" href=\"#top\">Method: listAssignableRoles</a></h3>\nDescription:<br />\nReturns a list of user roles that this user can assign to others.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n<ul>\n    <li>string - (role label)</li>\n</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listAssignedSystemGroups\" href=\"#top\">Method: listAssignedSystemGroups</a></h3>\nDescription:<br />\nReturns the system groups that a user can administer.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n     \t     struct - system group\n\t<ul>\n       \t<li> int \"id\"</li>\n       \t<li> string \"name\"</li>\n       \t<li> string \"description\"</li>\n");
      out.write("       \t<li> int \"system_count\"</li>\n           <li> int \"org_id\" - Organization ID for this system group. </li>\n     \t</ul>\n   </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listDefaultSystemGroups\" href=\"#top\">Method: listDefaultSystemGroups</a></h3>\nDescription:<br />\nReturns a user's list of default system groups.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n     \t     struct - system group\n\t<ul>\n       \t<li> int \"id\"</li>\n       \t<li> string \"name\"</li>\n       \t<li> string \"description\"</li>\n       \t<li> int \"system_count\"</li>\n           <li> int \"org_id\" - Organization ID for this system group. </li>\n     \t</ul>\n   </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listRoles\" href=\"#top\">Method: listRoles</a></h3>\nDescription:<br />\nReturns a list of the user's roles.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n");
      out.write(" </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n<ul>\n    <li>string - (role label)</li>\n</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listUsers\" href=\"#top\">Method: listUsers</a></h3>\nDescription:<br />\nReturns a list of users in your organization.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n     \n\n\t     struct - user\n\t<ul>\n              \t<li> int \"id\"</li>\n              \t<li> string \"login\"</li>\n                  <li> string \"login_uc\" - upper case version of the login </li>\n                  <li> boolean \"enabled\" - true if user is enabled,\n                         false if the user is disabled </li>\n      \t</ul>\n \n </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removeAssignedSystemGroup\" href=\"#top\">Method: removeAssignedSystemGroup</a></h3>\nDescription:<br />\nRemove system group from the user's list of assigned system groups.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n");
      out.write("\n    string login - User's login name.\n </li>\n<li>\n\n    string serverGroupName\n </li>\n<li>\n\n    boolean setDefault - Should system group also\n be removed from the user's list of default system groups.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removeAssignedSystemGroups\" href=\"#top\">Method: removeAssignedSystemGroups</a></h3>\nDescription:<br />\nRemove system groups from a user's list of assigned system groups.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - serverGroupName</li>\n</ul>\n </li>\n<li>\n\n    boolean setDefault - Should system groups also be\n removed from the user's list of default system groups.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removeDefaultSystemGroup\" href=\"#top\">Method: removeDefaultSystemGroup</a></h3>\n");
      out.write("Description:<br />\nRemove a system group from user's list of default system groups.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n<li>\n\n    string serverGroupName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removeDefaultSystemGroups\" href=\"#top\">Method: removeDefaultSystemGroups</a></h3>\nDescription:<br />\nRemove system groups from a user's list of default system groups.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - serverGroupName</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"removeRole\" href=\"#top\">Method: removeRole</a></h3>\nDescription:<br />\nRemove a role from a user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n");
      out.write(" </li>\n<li>\n\n    string login - User login name to update.\n </li>\n<li>\n\n    string role - Role label to remove.  Can be any of:\n satellite_admin, org_admin, channel_admin, config_admin, system_group_admin, or\n activation_key_admin.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setCreateDefaultSystemGroup\" href=\"#top\">Method: setCreateDefaultSystemGroup</a></h3>\nDescription:<br />\nSets the value of the CreateDefaultSystemGroup setting.\n If True this will cause there to be a system group created (with the same name\n as the user) every time a new user is created, with the user automatically given\n permission to that system group and the system group being set as the default\n group for the user (so every time the user registers a system it will be\n placed in that system group by default). This can be useful if different\n users will administer different groups of servers in the same organization.\n Can only be called by an org_admin.\n");
      out.write("<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    boolean createDefaultSystemGruop - True if we should automatically create system groups, false otherwise.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setDetails\" href=\"#top\">Method: setDetails</a></h3>\nDescription:<br />\nUpdates the details of a user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n<li>\n\n\t     struct - user details\n\t<ul>\n         <li> string \"first_names\" - deprecated, use first_name </li>\n     \t<li> string \"first_name\"</li>\n     \t<li> string \"last_name\"</li>\n     \t<li> string \"email\"</li>\n     \t<li> string \"prefix\"</li>\n     \t<li> string \"password\"</li>\n   \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setErrataNotifications\" href=\"#top\">Method: setErrataNotifications</a></h3>\n");
      out.write("Description:<br />\nEnables/disables errata mail notifications for a specific user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n<li>\n\n    boolean value - True for enabling\n errata notifications, False for disabling\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"setReadOnly\" href=\"#top\">Method: setReadOnly</a></h3>\nDescription:<br />\nSets whether the target user should have only read-only API access or\n standard full scale access.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n<li>\n\n    boolean readOnly - Sets whether the target user should\n have only read-only API access or standard full scale access.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"usePamAuthentication\" href=\"#top\">Method: usePamAuthentication</a></h3>\n");
      out.write("Description:<br />\nToggles whether or not a user uses PAM authentication or\n basic Satellite authentication.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string login - User's login name.\n </li>\n<li>\n\n    int pam_value\n   \t<ul>\n     \t<li>1 to enable PAM authentication</li>\n     \t<li>0 to disable.</li>\n   \t</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
