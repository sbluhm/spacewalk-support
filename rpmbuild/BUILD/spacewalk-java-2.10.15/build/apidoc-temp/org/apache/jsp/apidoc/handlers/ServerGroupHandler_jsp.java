/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Generated at: 2020-03-09 19:26:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apidoc.handlers;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ServerGroupHandler_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n<head>\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n\n<style type=\"text/css\">\nul.apidoc {\n   list-style-image: url('/img/parent_node.gif');\n}\n\n.deprecated {\n   text-decoration: line-through;\n}\n</style>\n</head>\n<body>\n<div class=\"spacewalk-toolbar-h1\">\n<h1><i class=\"fa fa-gears\"></i>API Overview</h1>\n</div>\n\n<h2>Description</h2>\n<p><strong>Namespace</strong>:\nsystemgroup\n</p>\n<p>Provides methods to access and modify system groups.</p>\n<span class=\"small-text\">( <a href=\"/rhn/apidoc/index.jsp\">Return to API Overview</a> )</span>\n<hr />\n\n<div class=\"rounded-box\">\n<h2><a name=\"top\">Available methods</a></h2>\n<ul class=\"apidoc\">\n\n<li><a href=\"#addOrRemoveAdmins\"/>addOrRemoveAdmins</a></li>\n<li><a href=\"#addOrRemoveSystems\"/>addOrRemoveSystems</a></li>\n<li><a href=\"#create\"/>create</a></li>\n<li><a href=\"#delete\"/>delete</a></li>\n<li><a href=\"#getDetails\"/>getDetails</a></li>\n<li><a href=\"#getDetails\"/>getDetails</a></li>\n<li><a href=\"#listActiveSystemsInGroup\"/>listActiveSystemsInGroup</a></li>\n<li><a href=\"#listAdministrators\"/>listAdministrators</a></li>\n");
      out.write("<li><a href=\"#listAllGroups\"/>listAllGroups</a></li>\n<li><a href=\"#listGroupsWithNoAssociatedAdmins\"/>listGroupsWithNoAssociatedAdmins</a></li>\n<li><a href=\"#listInactiveSystemsInGroup\"/>listInactiveSystemsInGroup</a></li>\n<li><a href=\"#listInactiveSystemsInGroup\"/>listInactiveSystemsInGroup</a></li>\n<li><a href=\"#listSystems\"/>listSystems</a></li>\n<li><a href=\"#listSystemsMinimal\"/>listSystemsMinimal</a></li>\n<li><a href=\"#scheduleApplyErrataToActive\"/>scheduleApplyErrataToActive</a></li>\n<li><a href=\"#scheduleApplyErrataToActive\"/>scheduleApplyErrataToActive</a></li>\n<li><a href=\"#update\"/>update</a></li>\n</ul>\n</div>\n<hr />\n\n<h3> <a name=\"addOrRemoveAdmins\" href=\"#top\">Method: addOrRemoveAdmins</a></h3>\nDescription:<br />\nAdd or remove administrators to/from the given group. Satellite and\n Organization administrators are granted access to groups within their organization\n by default; therefore, users with those roles should not be included in the array\n provided. Caller must be an organization administrator.\n");
      out.write("<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string systemGroupName\n </li>\n<li>\n\narray:\n<ul>\n    <li>string - loginName - User's loginName</li>\n</ul>\n </li>\n<li>\n\n    int add - 1 to add administrators, 0 to remove.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"addOrRemoveSystems\" href=\"#top\">Method: addOrRemoveSystems</a></h3>\nDescription:<br />\nAdd/remove the given servers to a system group.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string systemGroupName\n </li>\n<li>\n\narray:\n<ul>\n    <li>int - serverId</li>\n</ul>\n </li>\n<li>\n\n    boolean add - True to add to the group,\n              False to remove.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"create\" href=\"#top\">Method: create</a></h3>\nDescription:<br />\nCreate a new system group.\n<p />\n");
      out.write("\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string name - Name of the system group.\n </li>\n<li>\n\n    string description - Description of the\n                  system group.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Server Group\n\t<ul>\n          \t<li> int \"id\"</li>\n          \t<li> string \"name\"</li>\n          \t<li> string \"description\"</li>\n          \t<li> int \"org_id\"</li>\n          \t<li> int \"system_count\"</li>\n      \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"delete\" href=\"#top\">Method: delete</a></h3>\nDescription:<br />\nDelete a system group.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string systemGroupName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n    int - 1 on success, exception thrown otherwise.\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getDetails\" href=\"#top\">Method: getDetails</a></h3>\nDescription:<br />\nRetrieve details of a ServerGroup based on it's id\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n");
      out.write("\n        string sessionKey\n </li>\n<li>\n\n    int systemGroupId\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Server Group\n\t<ul>\n          \t<li> int \"id\"</li>\n          \t<li> string \"name\"</li>\n          \t<li> string \"description\"</li>\n          \t<li> int \"org_id\"</li>\n          \t<li> int \"system_count\"</li>\n      \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"getDetails\" href=\"#top\">Method: getDetails</a></h3>\nDescription:<br />\nRetrieve details of a ServerGroup based on it's name\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string systemGroupName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Server Group\n\t<ul>\n          \t<li> int \"id\"</li>\n          \t<li> string \"name\"</li>\n          \t<li> string \"description\"</li>\n          \t<li> int \"org_id\"</li>\n          \t<li> int \"system_count\"</li>\n      \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listActiveSystemsInGroup\" href=\"#top\">Method: listActiveSystemsInGroup</a></h3>\n");
      out.write("Description:<br />\nLists active systems within a server group\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string systemGroupName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n<ul>\n    <li>int - server_id</li>\n</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listAdministrators\" href=\"#top\">Method: listAdministrators</a></h3>\nDescription:<br />\nReturns the list of users who can administer the given group.\n Caller must be a system group admin or an organization administrator.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\nstring systemGroupName \n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n      \n\n\t     struct - user\n\t<ul>\n              \t<li> int \"id\"</li>\n              \t<li> string \"login\"</li>\n                  <li> string \"login_uc\" - upper case version of the login </li>\n                  <li> boolean \"enabled\" - true if user is enabled,\n                         false if the user is disabled </li>\n      \t</ul>\n");
      out.write(" \n   </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listAllGroups\" href=\"#top\">Method: listAllGroups</a></h3>\nDescription:<br />\nRetrieve a list of system groups that are accessible by the logged\n      in user.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - Server Group\n\t<ul>\n          \t<li> int \"id\"</li>\n          \t<li> string \"name\"</li>\n          \t<li> string \"description\"</li>\n          \t<li> int \"org_id\"</li>\n          \t<li> int \"system_count\"</li>\n      \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listGroupsWithNoAssociatedAdmins\" href=\"#top\">Method: listGroupsWithNoAssociatedAdmins</a></h3>\nDescription:<br />\nReturns a list of system groups that do not have an administrator.\n (who is not an organization administrator, as they have implicit access to\n system groups) Caller must be an organization administrator.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n");
      out.write(" </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - Server Group\n\t<ul>\n          \t<li> int \"id\"</li>\n          \t<li> string \"name\"</li>\n          \t<li> string \"description\"</li>\n          \t<li> int \"org_id\"</li>\n          \t<li> int \"system_count\"</li>\n      \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listInactiveSystemsInGroup\" href=\"#top\">Method: listInactiveSystemsInGroup</a></h3>\nDescription:<br />\nLists inactive systems within a server group using a\n          specified inactivity time.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string systemGroupName\n </li>\n<li>\n\n    int daysInactive - Number of days a system\n           must not check in to be considered inactive.\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n<ul>\n    <li>int - server_id</li>\n</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listInactiveSystemsInGroup\" href=\"#top\">Method: listInactiveSystemsInGroup</a></h3>\nDescription:<br />\n");
      out.write("Lists inactive systems within a server group using the default\n          1 day threshold.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string systemGroupName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n<ul>\n    <li>int - server_id</li>\n</ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listSystems\" href=\"#top\">Method: listSystems</a></h3>\nDescription:<br />\nReturn a list of systems associated with this system group.\n User must have access to this system group.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string systemGroupName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - server details\n\t<ul>\n             <li> int \"id\" - System id </li>\n         \t<li> string \"profile_name\"</li>\n             <li> string \"base_entitlement\" - System's base entitlement label </li>\n\n             <li>array \"string\"\n        <ul>\n            <li>addon_entitlements System's addon entitlements labels,\n                       currently only 'virtualization_host'</li>\n");
      out.write("        </ul>\n    </li>\n              <li> boolean \"auto_update\" - True if system has auto errata updates\n                                          enabled. </li>\n              <li> string \"release\" - The Operating System release (i.e. 4AS,\n                      5Server </li>\n          \t<li> string \"address1\"</li>\n          \t<li> string \"address2\"</li>\n          \t<li> string \"city\"</li>\n          \t<li> string \"state\"</li>\n          \t<li> string \"country\"</li>\n          \t<li> string \"building\"</li>\n          \t<li> string \"room\"</li>\n          \t<li> string \"rack\"</li>\n          \t<li> string \"description\"</li>\n          \t<li> string \"hostname\"</li>\n          \t<li> dateTime.iso8601 \"last_boot\"</li>\n              <li> string \"osa_status\" - Either 'unknown', 'offline', or 'online'. </li>\n              <li> boolean \"lock_status\" - True indicates that the system is locked.\n           False indicates that the system is unlocked. </li>\n              <li> string \"virtualization\" - Virtualization type -\n           for virtual guests only (optional) </li>\n");
      out.write("  \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"listSystemsMinimal\" href=\"#top\">Method: listSystemsMinimal</a></h3>\nDescription:<br />\nReturn a list of systems associated with this system group.\n User must have access to this system group.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string systemGroupName\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n  <ul>\n   <li>\n          \n\n\t     struct - system\n\t<ul>\n      \t<li> int \"id\"</li>\n      \t<li> string \"name\"</li>\n           <li> dateTime.iso8601 \"last_checkin\" - Last time server\n              successfully checked in </li>\n           <li> dateTime.iso8601 \"last_boot\" - Last server boot time </li>\n           <li> dateTime.iso8601 \"created\" - Server registration time </li>\n\n \t</ul>\n \n      </li></ul>\n \n</li></ul>\n</code>\n<p />\n<hr />\n\n<h3> <a name=\"scheduleApplyErrataToActive\" href=\"#top\">Method: scheduleApplyErrataToActive</a></h3>\nDescription:<br />\nSchedules an action to apply errata updates to active systems\n");
      out.write(" from a group.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string systemGroupName\n </li>\n<li>\n\narray:\n<ul>\n    <li>int - errataId</li>\n</ul>\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n<ul>\n    <li>int - actionId</li>\n</ul>\n \n</li></ul>\n</code>\n<p />\nAvailable since: 13.0 <p />\n<hr />\n\n<h3> <a name=\"scheduleApplyErrataToActive\" href=\"#top\">Method: scheduleApplyErrataToActive</a></h3>\nDescription:<br />\nSchedules an action to apply errata updates to active systems\n from a group at a given date/time.\n<p />\n\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n    string sessionKey\n </li>\n<li>\n\n    string systemGroupName\n </li>\n<li>\n\narray:\n<ul>\n    <li>int - errataId</li>\n</ul>\n </li>\n<li>\n\ndateTime.iso8601 earliestOccurrence \n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\narray:\n<ul>\n    <li>int - actionId</li>\n</ul>\n \n</li></ul>\n</code>\n<p />\nAvailable since: 13.0 <p />\n<hr />\n\n<h3> <a name=\"update\" href=\"#top\">Method: update</a></h3>\nDescription:<br />\nUpdate an existing system group.\n<p />\n");
      out.write("\n\n\n\nParameters:<br />\n<ul>\n<li>\n\n        string sessionKey\n </li>\n<li>\n\n    string systemGroupName\n </li>\n<li>\n\n    string description\n </li>\n</ul>\n<p />\nReturns:\n<code><ul><li>\n\n\n\n\n\t     struct - Server Group\n\t<ul>\n          \t<li> int \"id\"</li>\n          \t<li> string \"name\"</li>\n          \t<li> string \"description\"</li>\n          \t<li> int \"org_id\"</li>\n          \t<li> int \"system_count\"</li>\n      \t</ul>\n  \n \n</li></ul>\n</code>\n<p />\n<hr />\n</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
